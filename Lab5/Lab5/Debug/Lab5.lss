
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c4  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000790  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  8e:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_tx>:
//
////////////////////////////////////////////////////////////////////
void usart_tx(uint8_t data)
{
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <usart_tx>
	// Transmit data
	UDR0 = data;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <print>:

///////////////////////////////
// Function: print
// Purpose: print message byte by byte
///////////////////////////////
void print(char msg[]){
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	8c 01       	movw	r16, r24
	int i;
	for (i = 0; i < strlen(msg); i++) {
  ae:	c0 e0       	ldi	r28, 0x00	; 0
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <print+0x1e>
		usart_tx(msg[i]);
  b4:	f8 01       	movw	r30, r16
  b6:	ec 0f       	add	r30, r28
  b8:	fd 1f       	adc	r31, r29
  ba:	80 81       	ld	r24, Z
  bc:	0e 94 4b 00 	call	0x96	; 0x96 <usart_tx>
// Function: print
// Purpose: print message byte by byte
///////////////////////////////
void print(char msg[]){
	int i;
	for (i = 0; i < strlen(msg); i++) {
  c0:	21 96       	adiw	r28, 0x01	; 1
  c2:	f8 01       	movw	r30, r16
  c4:	01 90       	ld	r0, Z+
  c6:	00 20       	and	r0, r0
  c8:	e9 f7       	brne	.-6      	; 0xc4 <print+0x20>
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	e0 1b       	sub	r30, r16
  ce:	f1 0b       	sbc	r31, r17
  d0:	ce 17       	cp	r28, r30
  d2:	df 07       	cpc	r29, r31
  d4:	78 f3       	brcs	.-34     	; 0xb4 <print+0x10>
		usart_tx(msg[i]);
	}
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	08 95       	ret

000000e0 <usart_init>:
//			
////////////////////////////////////////////////////////////////////
void usart_init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  ea:	e2 ec       	ldi	r30, 0xC2	; 194
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	86 60       	ori	r24, 0x06	; 6
  f2:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  f4:	e1 ec       	ldi	r30, 0xC1	; 193
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 61       	ori	r24, 0x18	; 24
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <adc_read>:
//
////////////////////////////////////////////////////////////////////
uint16_t adc_read(void)
{
	// Trigger a voltage read
	ADCSRA |= (1<<ADSC);
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	while(ADSC == 1)
	{
		// Conversion Processing
	}
	
	return ADC;
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
}
 112:	08 95       	ret

00000114 <usart_rx>:
//
// Purpose: Receives data from serial monitor
//
////////////////////////////////////////////////////////////////////
void usart_rx(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <usart_rx+0x6>
 11a:	00 d0       	rcall	.+0      	; 0x11c <usart_rx+0x8>
 11c:	1f 92       	push	r1
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
 122:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 126:	88 23       	and	r24, r24
 128:	e4 f7       	brge	.-8      	; 0x122 <usart_rx+0xe>
	// Return received data
	if(UDR0 == 71)  // user entered G
 12a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 12e:	87 34       	cpi	r24, 0x47	; 71
 130:	61 f4       	brne	.+24     	; 0x14a <usart_rx+0x36>
	{
		uint16_t adc_val = adc_read();
 132:	0e 94 80 00 	call	0x100	; 0x100 <adc_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 136:	4a e0       	ldi	r20, 0x0A	; 10
 138:	be 01       	movw	r22, r28
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	0e 94 ca 00 	call	0x194	; 0x194 <__itoa_ncheck>
		char adc_str[5];
		// convert to string and print
		itoa(adc_val, adc_str,10);
		//char output[10];
		//sprintf(output, "V = %.3f", adc_double);
		print(adc_str);
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
	}
	if(UDR0 == 77)  // user entered M
 14a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14e:	8d 34       	cpi	r24, 0x4D	; 77
 150:	21 f4       	brne	.+8      	; 0x15a <usart_rx+0x46>
	{
		print("t = \n");	
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
	}
	if(UDR0 == 4) // EOT
 15a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	{
		// do nothing (prevents double print at end for some reason)
	}

}
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <adc_init>:
//
////////////////////////////////////////////////////////////////////
void adc_init(void)
{
	// Set ADC voltage reference and input channel (Port A1)
	ADMUX |= (1<<REFS0) | (1<<MUX0);  //AVcc as voltage reference
 16e:	ec e7       	ldi	r30, 0x7C	; 124
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 64       	ori	r24, 0x41	; 65
 176:	80 83       	st	Z, r24
	// Set up the status register
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	87 6c       	ori	r24, 0xC7	; 199
 180:	80 83       	st	Z, r24
	sei(); // enable global interrupts
 182:	78 94       	sei
 184:	08 95       	ret

00000186 <main>:
//
////////////////////////////////////////////////////////////////////
int main(void)
{	
	// Initializations
	usart_init();    
 186:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_init>
	adc_init();
 18a:	0e 94 b7 00 	call	0x16e	; 0x16e <adc_init>
	
	// main loop
    while (1) 
    {
		usart_rx();
 18e:	0e 94 8a 00 	call	0x114	; 0x114 <usart_rx>
 192:	fd cf       	rjmp	.-6      	; 0x18e <main+0x8>

00000194 <__itoa_ncheck>:
 194:	bb 27       	eor	r27, r27
 196:	4a 30       	cpi	r20, 0x0A	; 10
 198:	31 f4       	brne	.+12     	; 0x1a6 <__itoa_ncheck+0x12>
 19a:	99 23       	and	r25, r25
 19c:	22 f4       	brpl	.+8      	; 0x1a6 <__itoa_ncheck+0x12>
 19e:	bd e2       	ldi	r27, 0x2D	; 45
 1a0:	90 95       	com	r25
 1a2:	81 95       	neg	r24
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__utoa_common>

000001aa <__utoa_ncheck>:
 1aa:	bb 27       	eor	r27, r27

000001ac <__utoa_common>:
 1ac:	fb 01       	movw	r30, r22
 1ae:	55 27       	eor	r21, r21
 1b0:	aa 27       	eor	r26, r26
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	aa 1f       	adc	r26, r26
 1b8:	a4 17       	cp	r26, r20
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <__utoa_common+0x14>
 1bc:	a4 1b       	sub	r26, r20
 1be:	83 95       	inc	r24
 1c0:	50 51       	subi	r21, 0x10	; 16
 1c2:	b9 f7       	brne	.-18     	; 0x1b2 <__utoa_common+0x6>
 1c4:	a0 5d       	subi	r26, 0xD0	; 208
 1c6:	aa 33       	cpi	r26, 0x3A	; 58
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <__utoa_common+0x20>
 1ca:	a9 5d       	subi	r26, 0xD9	; 217
 1cc:	a1 93       	st	Z+, r26
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	79 f7       	brne	.-34     	; 0x1b0 <__utoa_common+0x4>
 1d2:	b1 11       	cpse	r27, r1
 1d4:	b1 93       	st	Z+, r27
 1d6:	11 92       	st	Z+, r1
 1d8:	cb 01       	movw	r24, r22
 1da:	0c 94 ef 00 	jmp	0x1de	; 0x1de <strrev>

000001de <strrev>:
 1de:	dc 01       	movw	r26, r24
 1e0:	fc 01       	movw	r30, r24
 1e2:	67 2f       	mov	r22, r23
 1e4:	71 91       	ld	r23, Z+
 1e6:	77 23       	and	r23, r23
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <strrev+0x4>
 1ea:	32 97       	sbiw	r30, 0x02	; 2
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <strrev+0x18>
 1ee:	7c 91       	ld	r23, X
 1f0:	6d 93       	st	X+, r22
 1f2:	70 83       	st	Z, r23
 1f4:	62 91       	ld	r22, -Z
 1f6:	ae 17       	cp	r26, r30
 1f8:	bf 07       	cpc	r27, r31
 1fa:	c8 f3       	brcs	.-14     	; 0x1ee <strrev+0x10>
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
