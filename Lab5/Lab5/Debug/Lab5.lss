
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000024a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0f  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000803  00000000  00000000  00000fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000421  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000473  00000000  00000000  000021b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  8e:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_tx>:
		n = n - 1;
		dt_out = dt_out + dt;
		//delay(dt);  TODO: figure out why this is throwing an error
		
	}
}
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <usart_tx>
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <print>:
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	8c 01       	movw	r16, r24
  ae:	c0 e0       	ldi	r28, 0x00	; 0
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <print+0x1e>
  b4:	f8 01       	movw	r30, r16
  b6:	ec 0f       	add	r30, r28
  b8:	fd 1f       	adc	r31, r29
  ba:	80 81       	ld	r24, Z
  bc:	0e 94 4b 00 	call	0x96	; 0x96 <usart_tx>
  c0:	21 96       	adiw	r28, 0x01	; 1
  c2:	f8 01       	movw	r30, r16
  c4:	01 90       	ld	r0, Z+
  c6:	00 20       	and	r0, r0
  c8:	e9 f7       	brne	.-6      	; 0xc4 <print+0x20>
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	e0 1b       	sub	r30, r16
  ce:	f1 0b       	sbc	r31, r17
  d0:	ce 17       	cp	r28, r30
  d2:	df 07       	cpc	r29, r31
  d4:	78 f3       	brcs	.-34     	; 0xb4 <print+0x10>
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	08 95       	ret

000000e0 <usart_init>:
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ea:	e2 ec       	ldi	r30, 0xC2	; 194
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	86 60       	ori	r24, 0x06	; 6
  f2:	80 83       	st	Z, r24
  f4:	e1 ec       	ldi	r30, 0xC1	; 193
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 61       	ori	r24, 0x18	; 24
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <adc_read>:
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 112:	08 95       	ret

00000114 <usart_rx>:
 114:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 118:	88 23       	and	r24, r24
 11a:	e4 f7       	brge	.-8      	; 0x114 <usart_rx>
 11c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret

00000124 <adc_init>:
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 64       	ori	r24, 0x41	; 65
 12c:	80 83       	st	Z, r24
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	87 6c       	ori	r24, 0xC7	; 199
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <main>:
//
// Purpose: Drives the program
//
////////////////////////////////////////////////////////////////////
int main(void)
{	
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0x6>
 140:	00 d0       	rcall	.+0      	; 0x142 <main+0x8>
 142:	1f 92       	push	r1
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	// Initializations
	usart_init();    
 148:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_init>
	adc_init();
 14c:	0e 94 92 00 	call	0x124	; 0x124 <adc_init>
	uint16_t input;
	// main loop
    while (1)
    {
	    input = usart_rx();
 150:	0e 94 8a 00 	call	0x114	; 0x114 <usart_rx>
 154:	8c 01       	movw	r16, r24
	    char input_str[5];
	    if(input == 71)  // user entered G
 156:	87 34       	cpi	r24, 0x47	; 71
 158:	91 05       	cpc	r25, r1
 15a:	a1 f4       	brne	.+40     	; 0x184 <main+0x4a>
	    {
		    uint16_t adc_val = adc_read();
 15c:	0e 94 80 00 	call	0x100	; 0x100 <adc_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 160:	4a e0       	ldi	r20, 0x0A	; 10
 162:	be 01       	movw	r22, r28
 164:	6f 5f       	subi	r22, 0xFF	; 255
 166:	7f 4f       	sbci	r23, 0xFF	; 255
 168:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__itoa_ncheck>
		    itoa(adc_val, input_str,10);
		    print("V = ");
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		    print(input_str);
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		    print(" V\n");
 17c:	89 e1       	ldi	r24, 0x19	; 25
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
	    }
	    if(input == 77)  // user entered M, will also print ascii of everything following M
 184:	0d 34       	cpi	r16, 0x4D	; 77
 186:	11 05       	cpc	r17, r1
 188:	19 f7       	brne	.-58     	; 0x150 <main+0x16>
 18a:	4a e0       	ldi	r20, 0x0A	; 10
 18c:	be 01       	movw	r22, r28
 18e:	6f 5f       	subi	r22, 0xFF	; 255
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	c8 01       	movw	r24, r16
 194:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__itoa_ncheck>
	    {
		    itoa(input, input_str,10);
			print(input_str);
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
			print("\n");
 1a0:	8e e1       	ldi	r24, 0x1E	; 30
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		    while (input != 10){  // end found
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <main+0x92>
				input = usart_rx();
 1aa:	0e 94 8a 00 	call	0x114	; 0x114 <usart_rx>
 1ae:	8c 01       	movw	r16, r24
 1b0:	4a e0       	ldi	r20, 0x0A	; 10
 1b2:	be 01       	movw	r22, r28
 1b4:	6f 5f       	subi	r22, 0xFF	; 255
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255
 1b8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__itoa_ncheck>
				itoa(input, input_str,10);
			    print(input_str);
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
			    print("\n");
 1c4:	8e e1       	ldi	r24, 0x1E	; 30
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
	    if(input == 77)  // user entered M, will also print ascii of everything following M
	    {
		    itoa(input, input_str,10);
			print(input_str);
			print("\n");
		    while (input != 10){  // end found
 1cc:	0a 30       	cpi	r16, 0x0A	; 10
 1ce:	11 05       	cpc	r17, r1
 1d0:	61 f7       	brne	.-40     	; 0x1aa <main+0x70>
				itoa(input, input_str,10);
			    print(input_str);
			    print("\n");
			    
		    }
		    print("\n\n");
 1d2:	8d e1       	ldi	r24, 0x1D	; 29
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
	    }
	    if(input == 4) // EOT
	    {
		    // do nothing (prevents double print at end for some reason)
	    }
    }
 1da:	ba cf       	rjmp	.-140    	; 0x150 <main+0x16>

000001dc <__itoa_ncheck>:
 1dc:	bb 27       	eor	r27, r27
 1de:	4a 30       	cpi	r20, 0x0A	; 10
 1e0:	31 f4       	brne	.+12     	; 0x1ee <__itoa_ncheck+0x12>
 1e2:	99 23       	and	r25, r25
 1e4:	22 f4       	brpl	.+8      	; 0x1ee <__itoa_ncheck+0x12>
 1e6:	bd e2       	ldi	r27, 0x2D	; 45
 1e8:	90 95       	com	r25
 1ea:	81 95       	neg	r24
 1ec:	9f 4f       	sbci	r25, 0xFF	; 255
 1ee:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__utoa_common>

000001f2 <__utoa_ncheck>:
 1f2:	bb 27       	eor	r27, r27

000001f4 <__utoa_common>:
 1f4:	fb 01       	movw	r30, r22
 1f6:	55 27       	eor	r21, r21
 1f8:	aa 27       	eor	r26, r26
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	aa 1f       	adc	r26, r26
 200:	a4 17       	cp	r26, r20
 202:	10 f0       	brcs	.+4      	; 0x208 <__utoa_common+0x14>
 204:	a4 1b       	sub	r26, r20
 206:	83 95       	inc	r24
 208:	50 51       	subi	r21, 0x10	; 16
 20a:	b9 f7       	brne	.-18     	; 0x1fa <__utoa_common+0x6>
 20c:	a0 5d       	subi	r26, 0xD0	; 208
 20e:	aa 33       	cpi	r26, 0x3A	; 58
 210:	08 f0       	brcs	.+2      	; 0x214 <__utoa_common+0x20>
 212:	a9 5d       	subi	r26, 0xD9	; 217
 214:	a1 93       	st	Z+, r26
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	79 f7       	brne	.-34     	; 0x1f8 <__utoa_common+0x4>
 21a:	b1 11       	cpse	r27, r1
 21c:	b1 93       	st	Z+, r27
 21e:	11 92       	st	Z+, r1
 220:	cb 01       	movw	r24, r22
 222:	0c 94 13 01 	jmp	0x226	; 0x226 <strrev>

00000226 <strrev>:
 226:	dc 01       	movw	r26, r24
 228:	fc 01       	movw	r30, r24
 22a:	67 2f       	mov	r22, r23
 22c:	71 91       	ld	r23, Z+
 22e:	77 23       	and	r23, r23
 230:	e1 f7       	brne	.-8      	; 0x22a <strrev+0x4>
 232:	32 97       	sbiw	r30, 0x02	; 2
 234:	04 c0       	rjmp	.+8      	; 0x23e <strrev+0x18>
 236:	7c 91       	ld	r23, X
 238:	6d 93       	st	X+, r22
 23a:	70 83       	st	Z, r23
 23c:	62 91       	ld	r22, -Z
 23e:	ae 17       	cp	r26, r30
 240:	bf 07       	cpc	r27, r31
 242:	c8 f3       	brcs	.-14     	; 0x236 <strrev+0x10>
 244:	08 95       	ret

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
