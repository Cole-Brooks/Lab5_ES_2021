
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000e10  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3b  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000860  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004da  00000000  00000000  00002457  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000490  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f4  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 84 01 	call	0x308	; 0x308 <main>
  8e:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_tx>:
//
////////////////////////////////////////////////////////////////////
void usart_tx(uint8_t data)
{
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <usart_tx>
	// Transmit data
	UDR0 = data;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <print>:
// Function: print
//
// Purpose: print message byte by byte
//
///////////////////////////////
void print(char msg[]){
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	8c 01       	movw	r16, r24
	int i;
	for (i = 0; i < strlen(msg); i++) {
  ae:	c0 e0       	ldi	r28, 0x00	; 0
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <print+0x1e>
		usart_tx(msg[i]);
  b4:	f8 01       	movw	r30, r16
  b6:	ec 0f       	add	r30, r28
  b8:	fd 1f       	adc	r31, r29
  ba:	80 81       	ld	r24, Z
  bc:	0e 94 4b 00 	call	0x96	; 0x96 <usart_tx>
// Purpose: print message byte by byte
//
///////////////////////////////
void print(char msg[]){
	int i;
	for (i = 0; i < strlen(msg); i++) {
  c0:	21 96       	adiw	r28, 0x01	; 1
  c2:	f8 01       	movw	r30, r16
  c4:	01 90       	ld	r0, Z+
  c6:	00 20       	and	r0, r0
  c8:	e9 f7       	brne	.-6      	; 0xc4 <print+0x20>
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	e0 1b       	sub	r30, r16
  ce:	f1 0b       	sbc	r31, r17
  d0:	ce 17       	cp	r28, r30
  d2:	df 07       	cpc	r29, r31
  d4:	78 f3       	brcs	.-34     	; 0xb4 <print+0x10>
		usart_tx(msg[i]);
	}
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	08 95       	ret

000000e0 <usart_init>:
//			
////////////////////////////////////////////////////////////////////
void usart_init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  ea:	e2 ec       	ldi	r30, 0xC2	; 194
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	86 60       	ori	r24, 0x06	; 6
  f2:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  f4:	e1 ec       	ldi	r30, 0xC1	; 193
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 61       	ori	r24, 0x18	; 24
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <adc_read>:
//
////////////////////////////////////////////////////////////////////
uint16_t adc_read(void)
{
	// Trigger a voltage read
	ADCSRA |= (1<<ADSC);
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	while(ADSC == 1)
	{
		// Conversion Processing
	}
 
	return ADCW;
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 112:	08 95       	ret

00000114 <usart_rx>:
//
////////////////////////////////////////////////////////////////////
uint16_t usart_rx(void)
{
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
 114:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 118:	88 23       	and	r24, r24
 11a:	e4 f7       	brge	.-8      	; 0x114 <usart_rx>
	// Return received data
	return UDR0;
 11c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret

00000124 <adc_init>:
//
////////////////////////////////////////////////////////////////////
void adc_init(void)
{
	// Set ADC voltage reference and input channel (Port A1)
	ADMUX |= (1<<REFS0) | (1<<MUX0);  //AVcc as voltage reference
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 64       	ori	r24, 0x41	; 65
 12c:	80 83       	st	Z, r24
	// Set up the status register
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	87 6c       	ori	r24, 0xC7	; 199
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <adc_get_double>:
//
//
////////////////////////////////////////////////////////////////////
double adc_get_double(void)
{
	double adc = adc_read();
 13a:	0e 94 80 00 	call	0x100	; 0x100 <adc_read>
 13e:	bc 01       	movw	r22, r24
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 c6 02 	call	0x58c	; 0x58c <__floatunsisf>
	return adc * 5 / 1024;
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 ea       	ldi	r20, 0xA0	; 160
 14e:	50 e4       	ldi	r21, 0x40	; 64
 150:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__mulsf3>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	40 e8       	ldi	r20, 0x80	; 128
 15a:	5a e3       	ldi	r21, 0x3A	; 58
 15c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__mulsf3>
}
 160:	08 95       	ret

00000162 <measure_multiple>:

/////////////////////////
// Function: measure_multiple
// Purpose: execute multiple measurements following M command
/////////////////////////
void measure_multiple(int n, int dt){
 162:	2f 92       	push	r2
 164:	3f 92       	push	r3
 166:	4f 92       	push	r4
 168:	5f 92       	push	r5
 16a:	6f 92       	push	r6
 16c:	7f 92       	push	r7
 16e:	8f 92       	push	r8
 170:	9f 92       	push	r9
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	00 d0       	rcall	.+0      	; 0x188 <measure_multiple+0x26>
 188:	00 d0       	rcall	.+0      	; 0x18a <measure_multiple+0x28>
 18a:	1f 92       	push	r1
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	6c 01       	movw	r12, r24
 192:	1b 01       	movw	r2, r22
	char out[5];
	int dt_out = dt;
 194:	7b 01       	movw	r14, r22
	while (n > 0){
 196:	60 c0       	rjmp	.+192    	; 0x258 <measure_multiple+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	33 ed       	ldi	r19, 0xD3	; 211
 19c:	40 e3       	ldi	r20, 0x30	; 48
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	30 40       	sbci	r19, 0x00	; 0
 1a2:	40 40       	sbci	r20, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <measure_multiple+0x3c>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <measure_multiple+0x46>
 1a8:	00 00       	nop
		// delay stuff
		int dt_buff = dt;
		while(dt_buff > 0)
		{
			_delay_ms(1000);
			dt_buff --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <measure_multiple+0x4e>
 1ae:	c1 01       	movw	r24, r2
	char out[5];
	int dt_out = dt;
	while (n > 0){
		// delay stuff
		int dt_buff = dt;
		while(dt_buff > 0)
 1b0:	18 16       	cp	r1, r24
 1b2:	19 06       	cpc	r1, r25
 1b4:	8c f3       	brlt	.-30     	; 0x198 <measure_multiple+0x36>
		{
			_delay_ms(1000);
			dt_buff --;
		}
		
		print("t = ");
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		sprintf(out,"%i",dt_out);
 1be:	ff 92       	push	r15
 1c0:	ef 92       	push	r14
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	9f 93       	push	r25
 1c8:	8f 93       	push	r24
 1ca:	8e 01       	movw	r16, r28
 1cc:	0f 5f       	subi	r16, 0xFF	; 255
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 1d0:	1f 93       	push	r17
 1d2:	0f 93       	push	r16
 1d4:	0e 94 0c 04 	call	0x818	; 0x818 <sprintf>
		print(out);
 1d8:	c8 01       	movw	r24, r16
 1da:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		print(" s, V = ");
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		double v = adc_get_double();
 1e6:	0e 94 9d 00 	call	0x13a	; 0x13a <adc_get_double>
 1ea:	2b 01       	movw	r4, r22
 1ec:	3c 01       	movw	r6, r24
		sprintf(out,"%d.%02u", (int) v, (int) ((v - (int) v ) * 100) );
 1ee:	0e 94 90 02 	call	0x520	; 0x520 <__fixsfsi>
 1f2:	4b 01       	movw	r8, r22
 1f4:	5c 01       	movw	r10, r24
 1f6:	07 2e       	mov	r0, r23
 1f8:	00 0c       	add	r0, r0
 1fa:	88 0b       	sbc	r24, r24
 1fc:	99 0b       	sbc	r25, r25
 1fe:	0e 94 c8 02 	call	0x590	; 0x590 <__floatsisf>
 202:	9b 01       	movw	r18, r22
 204:	ac 01       	movw	r20, r24
 206:	c3 01       	movw	r24, r6
 208:	b2 01       	movw	r22, r4
 20a:	0e 94 23 02 	call	0x446	; 0x446 <__subsf3>
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	48 ec       	ldi	r20, 0xC8	; 200
 214:	52 e4       	ldi	r21, 0x42	; 66
 216:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__mulsf3>
 21a:	0e 94 90 02 	call	0x520	; 0x520 <__fixsfsi>
 21e:	7f 93       	push	r23
 220:	6f 93       	push	r22
 222:	9f 92       	push	r9
 224:	8f 92       	push	r8
 226:	81 e1       	ldi	r24, 0x11	; 17
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	9f 93       	push	r25
 22c:	8f 93       	push	r24
 22e:	1f 93       	push	r17
 230:	0f 93       	push	r16
 232:	0e 94 0c 04 	call	0x818	; 0x818 <sprintf>
		print(out);
 236:	c8 01       	movw	r24, r16
 238:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		print("V\n");
 23c:	89 e1       	ldi	r24, 0x19	; 25
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		
		n = n - 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	c8 1a       	sub	r12, r24
 248:	d1 08       	sbc	r13, r1
		dt_out = dt_out + dt;
 24a:	e2 0c       	add	r14, r2
 24c:	f3 1c       	adc	r15, r3
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
// Purpose: execute multiple measurements following M command
/////////////////////////
void measure_multiple(int n, int dt){
	char out[5];
	int dt_out = dt;
	while (n > 0){
 258:	1c 14       	cp	r1, r12
 25a:	1d 04       	cpc	r1, r13
 25c:	0c f4       	brge	.+2      	; 0x260 <measure_multiple+0xfe>
 25e:	a7 cf       	rjmp	.-178    	; 0x1ae <measure_multiple+0x4c>
		print("V\n");
		
		n = n - 1;
		dt_out = dt_out + dt;
	}
}
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	bf 90       	pop	r11
 27c:	af 90       	pop	r10
 27e:	9f 90       	pop	r9
 280:	8f 90       	pop	r8
 282:	7f 90       	pop	r7
 284:	6f 90       	pop	r6
 286:	5f 90       	pop	r5
 288:	4f 90       	pop	r4
 28a:	3f 90       	pop	r3
 28c:	2f 90       	pop	r2
 28e:	08 95       	ret

00000290 <get_string>:

////////////////////////
// Function: get_string
// Purpose: gets string from serial monitor
///////////////
const char* get_string(char input_str[]){
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	2a 97       	sbiw	r28, 0x0a	; 10
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	6c 01       	movw	r12, r24
	char buffer[10];
	uint16_t input = usart_rx();
 2b2:	0e 94 8a 00 	call	0x114	; 0x114 <usart_rx>
	
	int i = 0;
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	10 e0       	ldi	r17, 0x00	; 0
	while (input != 10){
 2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <get_string+0x52>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2bc:	4a e0       	ldi	r20, 0x0A	; 10
 2be:	be 01       	movw	r22, r28
 2c0:	6f 5f       	subi	r22, 0xFF	; 255
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	0e 94 df 03 	call	0x7be	; 0x7be <__itoa_ncheck>
		itoa(input, buffer, 10);
		//print(buffer);
		input_str[i] = atoi(buffer);
 2c8:	76 01       	movw	r14, r12
 2ca:	e0 0e       	add	r14, r16
 2cc:	f1 1e       	adc	r15, r17
 2ce:	ce 01       	movw	r24, r28
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	0e 94 c1 03 	call	0x782	; 0x782 <atoi>
 2d6:	f7 01       	movw	r30, r14
 2d8:	80 83       	st	Z, r24
		i = i + 1;
 2da:	0f 5f       	subi	r16, 0xFF	; 255
 2dc:	1f 4f       	sbci	r17, 0xFF	; 255
		input = usart_rx();
 2de:	0e 94 8a 00 	call	0x114	; 0x114 <usart_rx>
const char* get_string(char input_str[]){
	char buffer[10];
	uint16_t input = usart_rx();
	
	int i = 0;
	while (input != 10){
 2e2:	8a 30       	cpi	r24, 0x0A	; 10
 2e4:	91 05       	cpc	r25, r1
 2e6:	51 f7       	brne	.-44     	; 0x2bc <get_string+0x2c>
		i = i + 1;
		input = usart_rx();
	}
	
	return input_str;
}
 2e8:	c6 01       	movw	r24, r12
 2ea:	2a 96       	adiw	r28, 0x0a	; 10
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	08 95       	ret

00000308 <main>:
//
// Purpose: Drives the program
//
////////////////////////////////////////////////////////////////////
int main(void)
{	
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	6e 97       	sbiw	r28, 0x1e	; 30
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
	// Initializations
	usart_init();    
 31c:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_init>
	adc_init();
 320:	0e 94 92 00 	call	0x124	; 0x124 <adc_init>

	// main loop
    while (1)
    {	
		char input_str[10] = {};
 324:	8e 01       	movw	r16, r28
 326:	0b 5e       	subi	r16, 0xEB	; 235
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	f8 01       	movw	r30, r16
 32e:	11 92       	st	Z+, r1
 330:	8a 95       	dec	r24
 332:	e9 f7       	brne	.-6      	; 0x32e <main+0x26>
		char output_str[20];
		get_string(input_str);
 334:	c8 01       	movw	r24, r16
 336:	0e 94 48 01 	call	0x290	; 0x290 <get_string>
		
		print("Input: ");
 33a:	8c e1       	ldi	r24, 0x1C	; 28
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		print(input_str);
 342:	c8 01       	movw	r24, r16
 344:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
		print("\n");
 348:	8a e1       	ldi	r24, 0x1A	; 26
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
	
		
		if (input_str[0] == 71){ // G
 350:	8d 89       	ldd	r24, Y+21	; 0x15
 352:	87 34       	cpi	r24, 0x47	; 71
 354:	91 f5       	brne	.+100    	; 0x3ba <main+0xb2>
			double v = adc_get_double();
 356:	0e 94 9d 00 	call	0x13a	; 0x13a <adc_get_double>
 35a:	4b 01       	movw	r8, r22
 35c:	5c 01       	movw	r10, r24
			//print("G");
			sprintf(output_str,"V = %d.%02u V", (int) v, (int) ((v - (int) v ) * 100) );
 35e:	0e 94 90 02 	call	0x520	; 0x520 <__fixsfsi>
 362:	6b 01       	movw	r12, r22
 364:	7c 01       	movw	r14, r24
 366:	07 2e       	mov	r0, r23
 368:	00 0c       	add	r0, r0
 36a:	88 0b       	sbc	r24, r24
 36c:	99 0b       	sbc	r25, r25
 36e:	0e 94 c8 02 	call	0x590	; 0x590 <__floatsisf>
 372:	9b 01       	movw	r18, r22
 374:	ac 01       	movw	r20, r24
 376:	c5 01       	movw	r24, r10
 378:	b4 01       	movw	r22, r8
 37a:	0e 94 23 02 	call	0x446	; 0x446 <__subsf3>
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	48 ec       	ldi	r20, 0xC8	; 200
 384:	52 e4       	ldi	r21, 0x42	; 66
 386:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__mulsf3>
 38a:	0e 94 90 02 	call	0x520	; 0x520 <__fixsfsi>
 38e:	7f 93       	push	r23
 390:	6f 93       	push	r22
 392:	df 92       	push	r13
 394:	cf 92       	push	r12
 396:	84 e2       	ldi	r24, 0x24	; 36
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	9f 93       	push	r25
 39c:	8f 93       	push	r24
 39e:	04 51       	subi	r16, 0x14	; 20
 3a0:	11 09       	sbc	r17, r1
 3a2:	1f 93       	push	r17
 3a4:	0f 93       	push	r16
 3a6:	0e 94 0c 04 	call	0x818	; 0x818 <sprintf>
			print(output_str);
 3aa:	c8 01       	movw	r24, r16
 3ac:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
		}
		if (input_str[0] == 77){ // M
 3ba:	8d 89       	ldd	r24, Y+21	; 0x15
 3bc:	8d 34       	cpi	r24, 0x4D	; 77
 3be:	f1 f5       	brne	.+124    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			int n;
			
			if ((input_str[1] == 44) && (input_str[4] == 44)){ // n is two digit number
 3c0:	8e 89       	ldd	r24, Y+22	; 0x16
 3c2:	8c 32       	cpi	r24, 0x2C	; 44
 3c4:	41 f5       	brne	.+80     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3c6:	89 8d       	ldd	r24, Y+25	; 0x19
 3c8:	8c 32       	cpi	r24, 0x2C	; 44
 3ca:	29 f5       	brne	.+74     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
				n = ((input_str[2]-48)*10) + (input_str[3]-48);
 3cc:	2f 89       	ldd	r18, Y+23	; 0x17
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	20 53       	subi	r18, 0x30	; 48
 3d2:	31 09       	sbc	r19, r1
 3d4:	c9 01       	movw	r24, r18
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	22 0f       	add	r18, r18
 3e0:	33 1f       	adc	r19, r19
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	28 0f       	add	r18, r24
 3e8:	39 1f       	adc	r19, r25
 3ea:	88 8d       	ldd	r24, Y+24	; 0x18
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	c0 97       	sbiw	r24, 0x30	; 48
 3f0:	82 0f       	add	r24, r18
 3f2:	93 1f       	adc	r25, r19
				
				if ((input_str[5] == '1') && (input_str[6] == '0')){
 3f4:	6a 8d       	ldd	r22, Y+26	; 0x1a
 3f6:	61 33       	cpi	r22, 0x31	; 49
 3f8:	41 f4       	brne	.+16     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fa:	2b 8d       	ldd	r18, Y+27	; 0x1b
 3fc:	20 33       	cpi	r18, 0x30	; 48
 3fe:	29 f4       	brne	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
					measure_multiple(n,10);
 400:	6a e0       	ldi	r22, 0x0A	; 10
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	0e 94 b1 00 	call	0x162	; 0x162 <measure_multiple>
 408:	19 c0       	rjmp	.+50     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				}
				else{
					measure_multiple(n,input_str[5] - 48);
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	60 53       	subi	r22, 0x30	; 48
 40e:	71 09       	sbc	r23, r1
 410:	0e 94 b1 00 	call	0x162	; 0x162 <measure_multiple>
 414:	13 c0       	rjmp	.+38     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				}
			}
			else{
				n = input_str[2]-48;
 416:	8f 89       	ldd	r24, Y+23	; 0x17
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	c0 97       	sbiw	r24, 0x30	; 48
				if ((input_str[4] == '1') && (input_str[5] == '0')){
 41c:	69 8d       	ldd	r22, Y+25	; 0x19
 41e:	61 33       	cpi	r22, 0x31	; 49
 420:	41 f4       	brne	.+16     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 422:	2a 8d       	ldd	r18, Y+26	; 0x1a
 424:	20 33       	cpi	r18, 0x30	; 48
 426:	29 f4       	brne	.+10     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
					measure_multiple(n,10);
 428:	6a e0       	ldi	r22, 0x0A	; 10
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	0e 94 b1 00 	call	0x162	; 0x162 <measure_multiple>
 430:	05 c0       	rjmp	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				}
				else{
					measure_multiple(n,input_str[4] - 48);
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	60 53       	subi	r22, 0x30	; 48
 436:	71 09       	sbc	r23, r1
 438:	0e 94 b1 00 	call	0x162	; 0x162 <measure_multiple>
			}
			
			
			
		}
		print("\n");
 43c:	8a e1       	ldi	r24, 0x1A	; 26
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 52 00 	call	0xa4	; 0xa4 <print>
    }
 444:	6f cf       	rjmp	.-290    	; 0x324 <main+0x1c>

00000446 <__subsf3>:
 446:	50 58       	subi	r21, 0x80	; 128

00000448 <__addsf3>:
 448:	bb 27       	eor	r27, r27
 44a:	aa 27       	eor	r26, r26
 44c:	0e 94 3b 02 	call	0x476	; 0x476 <__addsf3x>
 450:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_round>
 454:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_pscA>
 458:	38 f0       	brcs	.+14     	; 0x468 <__addsf3+0x20>
 45a:	0e 94 13 03 	call	0x626	; 0x626 <__fp_pscB>
 45e:	20 f0       	brcs	.+8      	; 0x468 <__addsf3+0x20>
 460:	39 f4       	brne	.+14     	; 0x470 <__addsf3+0x28>
 462:	9f 3f       	cpi	r25, 0xFF	; 255
 464:	19 f4       	brne	.+6      	; 0x46c <__addsf3+0x24>
 466:	26 f4       	brtc	.+8      	; 0x470 <__addsf3+0x28>
 468:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_nan>
 46c:	0e f4       	brtc	.+2      	; 0x470 <__addsf3+0x28>
 46e:	e0 95       	com	r30
 470:	e7 fb       	bst	r30, 7
 472:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_inf>

00000476 <__addsf3x>:
 476:	e9 2f       	mov	r30, r25
 478:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_split3>
 47c:	58 f3       	brcs	.-42     	; 0x454 <__addsf3+0xc>
 47e:	ba 17       	cp	r27, r26
 480:	62 07       	cpc	r22, r18
 482:	73 07       	cpc	r23, r19
 484:	84 07       	cpc	r24, r20
 486:	95 07       	cpc	r25, r21
 488:	20 f0       	brcs	.+8      	; 0x492 <__addsf3x+0x1c>
 48a:	79 f4       	brne	.+30     	; 0x4aa <__addsf3x+0x34>
 48c:	a6 f5       	brtc	.+104    	; 0x4f6 <__addsf3x+0x80>
 48e:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_zero>
 492:	0e f4       	brtc	.+2      	; 0x496 <__addsf3x+0x20>
 494:	e0 95       	com	r30
 496:	0b 2e       	mov	r0, r27
 498:	ba 2f       	mov	r27, r26
 49a:	a0 2d       	mov	r26, r0
 49c:	0b 01       	movw	r0, r22
 49e:	b9 01       	movw	r22, r18
 4a0:	90 01       	movw	r18, r0
 4a2:	0c 01       	movw	r0, r24
 4a4:	ca 01       	movw	r24, r20
 4a6:	a0 01       	movw	r20, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	ff 27       	eor	r31, r31
 4ac:	59 1b       	sub	r21, r25
 4ae:	99 f0       	breq	.+38     	; 0x4d6 <__addsf3x+0x60>
 4b0:	59 3f       	cpi	r21, 0xF9	; 249
 4b2:	50 f4       	brcc	.+20     	; 0x4c8 <__addsf3x+0x52>
 4b4:	50 3e       	cpi	r21, 0xE0	; 224
 4b6:	68 f1       	brcs	.+90     	; 0x512 <__addsf3x+0x9c>
 4b8:	1a 16       	cp	r1, r26
 4ba:	f0 40       	sbci	r31, 0x00	; 0
 4bc:	a2 2f       	mov	r26, r18
 4be:	23 2f       	mov	r18, r19
 4c0:	34 2f       	mov	r19, r20
 4c2:	44 27       	eor	r20, r20
 4c4:	58 5f       	subi	r21, 0xF8	; 248
 4c6:	f3 cf       	rjmp	.-26     	; 0x4ae <__addsf3x+0x38>
 4c8:	46 95       	lsr	r20
 4ca:	37 95       	ror	r19
 4cc:	27 95       	ror	r18
 4ce:	a7 95       	ror	r26
 4d0:	f0 40       	sbci	r31, 0x00	; 0
 4d2:	53 95       	inc	r21
 4d4:	c9 f7       	brne	.-14     	; 0x4c8 <__addsf3x+0x52>
 4d6:	7e f4       	brtc	.+30     	; 0x4f6 <__addsf3x+0x80>
 4d8:	1f 16       	cp	r1, r31
 4da:	ba 0b       	sbc	r27, r26
 4dc:	62 0b       	sbc	r22, r18
 4de:	73 0b       	sbc	r23, r19
 4e0:	84 0b       	sbc	r24, r20
 4e2:	ba f0       	brmi	.+46     	; 0x512 <__addsf3x+0x9c>
 4e4:	91 50       	subi	r25, 0x01	; 1
 4e6:	a1 f0       	breq	.+40     	; 0x510 <__addsf3x+0x9a>
 4e8:	ff 0f       	add	r31, r31
 4ea:	bb 1f       	adc	r27, r27
 4ec:	66 1f       	adc	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	88 1f       	adc	r24, r24
 4f2:	c2 f7       	brpl	.-16     	; 0x4e4 <__addsf3x+0x6e>
 4f4:	0e c0       	rjmp	.+28     	; 0x512 <__addsf3x+0x9c>
 4f6:	ba 0f       	add	r27, r26
 4f8:	62 1f       	adc	r22, r18
 4fa:	73 1f       	adc	r23, r19
 4fc:	84 1f       	adc	r24, r20
 4fe:	48 f4       	brcc	.+18     	; 0x512 <__addsf3x+0x9c>
 500:	87 95       	ror	r24
 502:	77 95       	ror	r23
 504:	67 95       	ror	r22
 506:	b7 95       	ror	r27
 508:	f7 95       	ror	r31
 50a:	9e 3f       	cpi	r25, 0xFE	; 254
 50c:	08 f0       	brcs	.+2      	; 0x510 <__addsf3x+0x9a>
 50e:	b0 cf       	rjmp	.-160    	; 0x470 <__addsf3+0x28>
 510:	93 95       	inc	r25
 512:	88 0f       	add	r24, r24
 514:	08 f0       	brcs	.+2      	; 0x518 <__addsf3x+0xa2>
 516:	99 27       	eor	r25, r25
 518:	ee 0f       	add	r30, r30
 51a:	97 95       	ror	r25
 51c:	87 95       	ror	r24
 51e:	08 95       	ret

00000520 <__fixsfsi>:
 520:	0e 94 97 02 	call	0x52e	; 0x52e <__fixunssfsi>
 524:	68 94       	set
 526:	b1 11       	cpse	r27, r1
 528:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_szero>
 52c:	08 95       	ret

0000052e <__fixunssfsi>:
 52e:	0e 94 33 03 	call	0x666	; 0x666 <__fp_splitA>
 532:	88 f0       	brcs	.+34     	; 0x556 <__fixunssfsi+0x28>
 534:	9f 57       	subi	r25, 0x7F	; 127
 536:	98 f0       	brcs	.+38     	; 0x55e <__fixunssfsi+0x30>
 538:	b9 2f       	mov	r27, r25
 53a:	99 27       	eor	r25, r25
 53c:	b7 51       	subi	r27, 0x17	; 23
 53e:	b0 f0       	brcs	.+44     	; 0x56c <__fixunssfsi+0x3e>
 540:	e1 f0       	breq	.+56     	; 0x57a <__fixunssfsi+0x4c>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	1a f0       	brmi	.+6      	; 0x552 <__fixunssfsi+0x24>
 54c:	ba 95       	dec	r27
 54e:	c9 f7       	brne	.-14     	; 0x542 <__fixunssfsi+0x14>
 550:	14 c0       	rjmp	.+40     	; 0x57a <__fixunssfsi+0x4c>
 552:	b1 30       	cpi	r27, 0x01	; 1
 554:	91 f0       	breq	.+36     	; 0x57a <__fixunssfsi+0x4c>
 556:	0e 94 4d 03 	call	0x69a	; 0x69a <__fp_zero>
 55a:	b1 e0       	ldi	r27, 0x01	; 1
 55c:	08 95       	ret
 55e:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_zero>
 562:	67 2f       	mov	r22, r23
 564:	78 2f       	mov	r23, r24
 566:	88 27       	eor	r24, r24
 568:	b8 5f       	subi	r27, 0xF8	; 248
 56a:	39 f0       	breq	.+14     	; 0x57a <__fixunssfsi+0x4c>
 56c:	b9 3f       	cpi	r27, 0xF9	; 249
 56e:	cc f3       	brlt	.-14     	; 0x562 <__fixunssfsi+0x34>
 570:	86 95       	lsr	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b3 95       	inc	r27
 578:	d9 f7       	brne	.-10     	; 0x570 <__fixunssfsi+0x42>
 57a:	3e f4       	brtc	.+14     	; 0x58a <__fixunssfsi+0x5c>
 57c:	90 95       	com	r25
 57e:	80 95       	com	r24
 580:	70 95       	com	r23
 582:	61 95       	neg	r22
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	8f 4f       	sbci	r24, 0xFF	; 255
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__floatunsisf>:
 58c:	e8 94       	clt
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <__floatsisf+0x12>

00000590 <__floatsisf>:
 590:	97 fb       	bst	r25, 7
 592:	3e f4       	brtc	.+14     	; 0x5a2 <__floatsisf+0x12>
 594:	90 95       	com	r25
 596:	80 95       	com	r24
 598:	70 95       	com	r23
 59a:	61 95       	neg	r22
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	99 23       	and	r25, r25
 5a4:	a9 f0       	breq	.+42     	; 0x5d0 <__floatsisf+0x40>
 5a6:	f9 2f       	mov	r31, r25
 5a8:	96 e9       	ldi	r25, 0x96	; 150
 5aa:	bb 27       	eor	r27, r27
 5ac:	93 95       	inc	r25
 5ae:	f6 95       	lsr	r31
 5b0:	87 95       	ror	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b7 95       	ror	r27
 5b8:	f1 11       	cpse	r31, r1
 5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <__floatsisf+0x1c>
 5bc:	fa f4       	brpl	.+62     	; 0x5fc <__floatsisf+0x6c>
 5be:	bb 0f       	add	r27, r27
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <__floatsisf+0x36>
 5c2:	60 ff       	sbrs	r22, 0
 5c4:	1b c0       	rjmp	.+54     	; 0x5fc <__floatsisf+0x6c>
 5c6:	6f 5f       	subi	r22, 0xFF	; 255
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	16 c0       	rjmp	.+44     	; 0x5fc <__floatsisf+0x6c>
 5d0:	88 23       	and	r24, r24
 5d2:	11 f0       	breq	.+4      	; 0x5d8 <__floatsisf+0x48>
 5d4:	96 e9       	ldi	r25, 0x96	; 150
 5d6:	11 c0       	rjmp	.+34     	; 0x5fa <__floatsisf+0x6a>
 5d8:	77 23       	and	r23, r23
 5da:	21 f0       	breq	.+8      	; 0x5e4 <__floatsisf+0x54>
 5dc:	9e e8       	ldi	r25, 0x8E	; 142
 5de:	87 2f       	mov	r24, r23
 5e0:	76 2f       	mov	r23, r22
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__floatsisf+0x5e>
 5e4:	66 23       	and	r22, r22
 5e6:	71 f0       	breq	.+28     	; 0x604 <__floatsisf+0x74>
 5e8:	96 e8       	ldi	r25, 0x86	; 134
 5ea:	86 2f       	mov	r24, r22
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	2a f0       	brmi	.+10     	; 0x5fc <__floatsisf+0x6c>
 5f2:	9a 95       	dec	r25
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	da f7       	brpl	.-10     	; 0x5f2 <__floatsisf+0x62>
 5fc:	88 0f       	add	r24, r24
 5fe:	96 95       	lsr	r25
 600:	87 95       	ror	r24
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__fp_inf>:
 606:	97 f9       	bld	r25, 7
 608:	9f 67       	ori	r25, 0x7F	; 127
 60a:	80 e8       	ldi	r24, 0x80	; 128
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	08 95       	ret

00000612 <__fp_nan>:
 612:	9f ef       	ldi	r25, 0xFF	; 255
 614:	80 ec       	ldi	r24, 0xC0	; 192
 616:	08 95       	ret

00000618 <__fp_pscA>:
 618:	00 24       	eor	r0, r0
 61a:	0a 94       	dec	r0
 61c:	16 16       	cp	r1, r22
 61e:	17 06       	cpc	r1, r23
 620:	18 06       	cpc	r1, r24
 622:	09 06       	cpc	r0, r25
 624:	08 95       	ret

00000626 <__fp_pscB>:
 626:	00 24       	eor	r0, r0
 628:	0a 94       	dec	r0
 62a:	12 16       	cp	r1, r18
 62c:	13 06       	cpc	r1, r19
 62e:	14 06       	cpc	r1, r20
 630:	05 06       	cpc	r0, r21
 632:	08 95       	ret

00000634 <__fp_round>:
 634:	09 2e       	mov	r0, r25
 636:	03 94       	inc	r0
 638:	00 0c       	add	r0, r0
 63a:	11 f4       	brne	.+4      	; 0x640 <__fp_round+0xc>
 63c:	88 23       	and	r24, r24
 63e:	52 f0       	brmi	.+20     	; 0x654 <__fp_round+0x20>
 640:	bb 0f       	add	r27, r27
 642:	40 f4       	brcc	.+16     	; 0x654 <__fp_round+0x20>
 644:	bf 2b       	or	r27, r31
 646:	11 f4       	brne	.+4      	; 0x64c <__fp_round+0x18>
 648:	60 ff       	sbrs	r22, 0
 64a:	04 c0       	rjmp	.+8      	; 0x654 <__fp_round+0x20>
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	08 95       	ret

00000656 <__fp_split3>:
 656:	57 fd       	sbrc	r21, 7
 658:	90 58       	subi	r25, 0x80	; 128
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	59 f0       	breq	.+22     	; 0x676 <__fp_splitA+0x10>
 660:	5f 3f       	cpi	r21, 0xFF	; 255
 662:	71 f0       	breq	.+28     	; 0x680 <__fp_splitA+0x1a>
 664:	47 95       	ror	r20

00000666 <__fp_splitA>:
 666:	88 0f       	add	r24, r24
 668:	97 fb       	bst	r25, 7
 66a:	99 1f       	adc	r25, r25
 66c:	61 f0       	breq	.+24     	; 0x686 <__fp_splitA+0x20>
 66e:	9f 3f       	cpi	r25, 0xFF	; 255
 670:	79 f0       	breq	.+30     	; 0x690 <__fp_splitA+0x2a>
 672:	87 95       	ror	r24
 674:	08 95       	ret
 676:	12 16       	cp	r1, r18
 678:	13 06       	cpc	r1, r19
 67a:	14 06       	cpc	r1, r20
 67c:	55 1f       	adc	r21, r21
 67e:	f2 cf       	rjmp	.-28     	; 0x664 <__fp_split3+0xe>
 680:	46 95       	lsr	r20
 682:	f1 df       	rcall	.-30     	; 0x666 <__fp_splitA>
 684:	08 c0       	rjmp	.+16     	; 0x696 <__fp_splitA+0x30>
 686:	16 16       	cp	r1, r22
 688:	17 06       	cpc	r1, r23
 68a:	18 06       	cpc	r1, r24
 68c:	99 1f       	adc	r25, r25
 68e:	f1 cf       	rjmp	.-30     	; 0x672 <__fp_splitA+0xc>
 690:	86 95       	lsr	r24
 692:	71 05       	cpc	r23, r1
 694:	61 05       	cpc	r22, r1
 696:	08 94       	sec
 698:	08 95       	ret

0000069a <__fp_zero>:
 69a:	e8 94       	clt

0000069c <__fp_szero>:
 69c:	bb 27       	eor	r27, r27
 69e:	66 27       	eor	r22, r22
 6a0:	77 27       	eor	r23, r23
 6a2:	cb 01       	movw	r24, r22
 6a4:	97 f9       	bld	r25, 7
 6a6:	08 95       	ret

000006a8 <__mulsf3>:
 6a8:	0e 94 67 03 	call	0x6ce	; 0x6ce <__mulsf3x>
 6ac:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_round>
 6b0:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_pscA>
 6b4:	38 f0       	brcs	.+14     	; 0x6c4 <__mulsf3+0x1c>
 6b6:	0e 94 13 03 	call	0x626	; 0x626 <__fp_pscB>
 6ba:	20 f0       	brcs	.+8      	; 0x6c4 <__mulsf3+0x1c>
 6bc:	95 23       	and	r25, r21
 6be:	11 f0       	breq	.+4      	; 0x6c4 <__mulsf3+0x1c>
 6c0:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_inf>
 6c4:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_nan>
 6c8:	11 24       	eor	r1, r1
 6ca:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_szero>

000006ce <__mulsf3x>:
 6ce:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_split3>
 6d2:	70 f3       	brcs	.-36     	; 0x6b0 <__mulsf3+0x8>

000006d4 <__mulsf3_pse>:
 6d4:	95 9f       	mul	r25, r21
 6d6:	c1 f3       	breq	.-16     	; 0x6c8 <__mulsf3+0x20>
 6d8:	95 0f       	add	r25, r21
 6da:	50 e0       	ldi	r21, 0x00	; 0
 6dc:	55 1f       	adc	r21, r21
 6de:	62 9f       	mul	r22, r18
 6e0:	f0 01       	movw	r30, r0
 6e2:	72 9f       	mul	r23, r18
 6e4:	bb 27       	eor	r27, r27
 6e6:	f0 0d       	add	r31, r0
 6e8:	b1 1d       	adc	r27, r1
 6ea:	63 9f       	mul	r22, r19
 6ec:	aa 27       	eor	r26, r26
 6ee:	f0 0d       	add	r31, r0
 6f0:	b1 1d       	adc	r27, r1
 6f2:	aa 1f       	adc	r26, r26
 6f4:	64 9f       	mul	r22, r20
 6f6:	66 27       	eor	r22, r22
 6f8:	b0 0d       	add	r27, r0
 6fa:	a1 1d       	adc	r26, r1
 6fc:	66 1f       	adc	r22, r22
 6fe:	82 9f       	mul	r24, r18
 700:	22 27       	eor	r18, r18
 702:	b0 0d       	add	r27, r0
 704:	a1 1d       	adc	r26, r1
 706:	62 1f       	adc	r22, r18
 708:	73 9f       	mul	r23, r19
 70a:	b0 0d       	add	r27, r0
 70c:	a1 1d       	adc	r26, r1
 70e:	62 1f       	adc	r22, r18
 710:	83 9f       	mul	r24, r19
 712:	a0 0d       	add	r26, r0
 714:	61 1d       	adc	r22, r1
 716:	22 1f       	adc	r18, r18
 718:	74 9f       	mul	r23, r20
 71a:	33 27       	eor	r19, r19
 71c:	a0 0d       	add	r26, r0
 71e:	61 1d       	adc	r22, r1
 720:	23 1f       	adc	r18, r19
 722:	84 9f       	mul	r24, r20
 724:	60 0d       	add	r22, r0
 726:	21 1d       	adc	r18, r1
 728:	82 2f       	mov	r24, r18
 72a:	76 2f       	mov	r23, r22
 72c:	6a 2f       	mov	r22, r26
 72e:	11 24       	eor	r1, r1
 730:	9f 57       	subi	r25, 0x7F	; 127
 732:	50 40       	sbci	r21, 0x00	; 0
 734:	9a f0       	brmi	.+38     	; 0x75c <__mulsf3_pse+0x88>
 736:	f1 f0       	breq	.+60     	; 0x774 <__mulsf3_pse+0xa0>
 738:	88 23       	and	r24, r24
 73a:	4a f0       	brmi	.+18     	; 0x74e <__mulsf3_pse+0x7a>
 73c:	ee 0f       	add	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	bb 1f       	adc	r27, r27
 742:	66 1f       	adc	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	91 50       	subi	r25, 0x01	; 1
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	a9 f7       	brne	.-22     	; 0x738 <__mulsf3_pse+0x64>
 74e:	9e 3f       	cpi	r25, 0xFE	; 254
 750:	51 05       	cpc	r21, r1
 752:	80 f0       	brcs	.+32     	; 0x774 <__mulsf3_pse+0xa0>
 754:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_inf>
 758:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_szero>
 75c:	5f 3f       	cpi	r21, 0xFF	; 255
 75e:	e4 f3       	brlt	.-8      	; 0x758 <__mulsf3_pse+0x84>
 760:	98 3e       	cpi	r25, 0xE8	; 232
 762:	d4 f3       	brlt	.-12     	; 0x758 <__mulsf3_pse+0x84>
 764:	86 95       	lsr	r24
 766:	77 95       	ror	r23
 768:	67 95       	ror	r22
 76a:	b7 95       	ror	r27
 76c:	f7 95       	ror	r31
 76e:	e7 95       	ror	r30
 770:	9f 5f       	subi	r25, 0xFF	; 255
 772:	c1 f7       	brne	.-16     	; 0x764 <__mulsf3_pse+0x90>
 774:	fe 2b       	or	r31, r30
 776:	88 0f       	add	r24, r24
 778:	91 1d       	adc	r25, r1
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	97 f9       	bld	r25, 7
 780:	08 95       	ret

00000782 <atoi>:
 782:	fc 01       	movw	r30, r24
 784:	88 27       	eor	r24, r24
 786:	99 27       	eor	r25, r25
 788:	e8 94       	clt
 78a:	21 91       	ld	r18, Z+
 78c:	20 32       	cpi	r18, 0x20	; 32
 78e:	e9 f3       	breq	.-6      	; 0x78a <atoi+0x8>
 790:	29 30       	cpi	r18, 0x09	; 9
 792:	10 f0       	brcs	.+4      	; 0x798 <atoi+0x16>
 794:	2e 30       	cpi	r18, 0x0E	; 14
 796:	c8 f3       	brcs	.-14     	; 0x78a <atoi+0x8>
 798:	2b 32       	cpi	r18, 0x2B	; 43
 79a:	41 f0       	breq	.+16     	; 0x7ac <atoi+0x2a>
 79c:	2d 32       	cpi	r18, 0x2D	; 45
 79e:	39 f4       	brne	.+14     	; 0x7ae <atoi+0x2c>
 7a0:	68 94       	set
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <atoi+0x2a>
 7a4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__mulhi_const_10>
 7a8:	82 0f       	add	r24, r18
 7aa:	91 1d       	adc	r25, r1
 7ac:	21 91       	ld	r18, Z+
 7ae:	20 53       	subi	r18, 0x30	; 48
 7b0:	2a 30       	cpi	r18, 0x0A	; 10
 7b2:	c0 f3       	brcs	.-16     	; 0x7a4 <atoi+0x22>
 7b4:	1e f4       	brtc	.+6      	; 0x7bc <atoi+0x3a>
 7b6:	90 95       	com	r25
 7b8:	81 95       	neg	r24
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	08 95       	ret

000007be <__itoa_ncheck>:
 7be:	bb 27       	eor	r27, r27
 7c0:	4a 30       	cpi	r20, 0x0A	; 10
 7c2:	31 f4       	brne	.+12     	; 0x7d0 <__itoa_ncheck+0x12>
 7c4:	99 23       	and	r25, r25
 7c6:	22 f4       	brpl	.+8      	; 0x7d0 <__itoa_ncheck+0x12>
 7c8:	bd e2       	ldi	r27, 0x2D	; 45
 7ca:	90 95       	com	r25
 7cc:	81 95       	neg	r24
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__utoa_common>

000007d4 <__mulhi_const_10>:
 7d4:	7a e0       	ldi	r23, 0x0A	; 10
 7d6:	97 9f       	mul	r25, r23
 7d8:	90 2d       	mov	r25, r0
 7da:	87 9f       	mul	r24, r23
 7dc:	80 2d       	mov	r24, r0
 7de:	91 0d       	add	r25, r1
 7e0:	11 24       	eor	r1, r1
 7e2:	08 95       	ret

000007e4 <__utoa_ncheck>:
 7e4:	bb 27       	eor	r27, r27

000007e6 <__utoa_common>:
 7e6:	fb 01       	movw	r30, r22
 7e8:	55 27       	eor	r21, r21
 7ea:	aa 27       	eor	r26, r26
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	aa 1f       	adc	r26, r26
 7f2:	a4 17       	cp	r26, r20
 7f4:	10 f0       	brcs	.+4      	; 0x7fa <__utoa_common+0x14>
 7f6:	a4 1b       	sub	r26, r20
 7f8:	83 95       	inc	r24
 7fa:	50 51       	subi	r21, 0x10	; 16
 7fc:	b9 f7       	brne	.-18     	; 0x7ec <__utoa_common+0x6>
 7fe:	a0 5d       	subi	r26, 0xD0	; 208
 800:	aa 33       	cpi	r26, 0x3A	; 58
 802:	08 f0       	brcs	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 804:	a9 5d       	subi	r26, 0xD9	; 217
 806:	a1 93       	st	Z+, r26
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	79 f7       	brne	.-34     	; 0x7ea <__utoa_common+0x4>
 80c:	b1 11       	cpse	r27, r1
 80e:	b1 93       	st	Z+, r27
 810:	11 92       	st	Z+, r1
 812:	cb 01       	movw	r24, r22
 814:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <strrev>

00000818 <sprintf>:
 818:	ae e0       	ldi	r26, 0x0E	; 14
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	e2 e1       	ldi	r30, 0x12	; 18
 81e:	f4 e0       	ldi	r31, 0x04	; 4
 820:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__prologue_saves__+0x1c>
 824:	0d 89       	ldd	r16, Y+21	; 0x15
 826:	1e 89       	ldd	r17, Y+22	; 0x16
 828:	86 e0       	ldi	r24, 0x06	; 6
 82a:	8c 83       	std	Y+4, r24	; 0x04
 82c:	1a 83       	std	Y+2, r17	; 0x02
 82e:	09 83       	std	Y+1, r16	; 0x01
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	9f e7       	ldi	r25, 0x7F	; 127
 834:	9e 83       	std	Y+6, r25	; 0x06
 836:	8d 83       	std	Y+5, r24	; 0x05
 838:	ae 01       	movw	r20, r28
 83a:	47 5e       	subi	r20, 0xE7	; 231
 83c:	5f 4f       	sbci	r21, 0xFF	; 255
 83e:	6f 89       	ldd	r22, Y+23	; 0x17
 840:	78 8d       	ldd	r23, Y+24	; 0x18
 842:	ce 01       	movw	r24, r28
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	0e 94 2e 04 	call	0x85c	; 0x85c <vfprintf>
 84a:	ef 81       	ldd	r30, Y+7	; 0x07
 84c:	f8 85       	ldd	r31, Y+8	; 0x08
 84e:	e0 0f       	add	r30, r16
 850:	f1 1f       	adc	r31, r17
 852:	10 82       	st	Z, r1
 854:	2e 96       	adiw	r28, 0x0e	; 14
 856:	e4 e0       	ldi	r30, 0x04	; 4
 858:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__epilogue_restores__+0x1c>

0000085c <vfprintf>:
 85c:	ab e0       	ldi	r26, 0x0B	; 11
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e4 e3       	ldi	r30, 0x34	; 52
 862:	f4 e0       	ldi	r31, 0x04	; 4
 864:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__prologue_saves__>
 868:	6c 01       	movw	r12, r24
 86a:	7b 01       	movw	r14, r22
 86c:	8a 01       	movw	r16, r20
 86e:	fc 01       	movw	r30, r24
 870:	17 82       	std	Z+7, r1	; 0x07
 872:	16 82       	std	Z+6, r1	; 0x06
 874:	83 81       	ldd	r24, Z+3	; 0x03
 876:	81 ff       	sbrs	r24, 1
 878:	cc c1       	rjmp	.+920    	; 0xc12 <__stack+0x313>
 87a:	ce 01       	movw	r24, r28
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	3c 01       	movw	r6, r24
 880:	f6 01       	movw	r30, r12
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	f7 01       	movw	r30, r14
 886:	93 fd       	sbrc	r25, 3
 888:	85 91       	lpm	r24, Z+
 88a:	93 ff       	sbrs	r25, 3
 88c:	81 91       	ld	r24, Z+
 88e:	7f 01       	movw	r14, r30
 890:	88 23       	and	r24, r24
 892:	09 f4       	brne	.+2      	; 0x896 <vfprintf+0x3a>
 894:	ba c1       	rjmp	.+884    	; 0xc0a <__stack+0x30b>
 896:	85 32       	cpi	r24, 0x25	; 37
 898:	39 f4       	brne	.+14     	; 0x8a8 <vfprintf+0x4c>
 89a:	93 fd       	sbrc	r25, 3
 89c:	85 91       	lpm	r24, Z+
 89e:	93 ff       	sbrs	r25, 3
 8a0:	81 91       	ld	r24, Z+
 8a2:	7f 01       	movw	r14, r30
 8a4:	85 32       	cpi	r24, 0x25	; 37
 8a6:	29 f4       	brne	.+10     	; 0x8b2 <vfprintf+0x56>
 8a8:	b6 01       	movw	r22, r12
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 8b0:	e7 cf       	rjmp	.-50     	; 0x880 <vfprintf+0x24>
 8b2:	91 2c       	mov	r9, r1
 8b4:	21 2c       	mov	r2, r1
 8b6:	31 2c       	mov	r3, r1
 8b8:	ff e1       	ldi	r31, 0x1F	; 31
 8ba:	f3 15       	cp	r31, r3
 8bc:	d8 f0       	brcs	.+54     	; 0x8f4 <vfprintf+0x98>
 8be:	8b 32       	cpi	r24, 0x2B	; 43
 8c0:	79 f0       	breq	.+30     	; 0x8e0 <vfprintf+0x84>
 8c2:	38 f4       	brcc	.+14     	; 0x8d2 <vfprintf+0x76>
 8c4:	80 32       	cpi	r24, 0x20	; 32
 8c6:	79 f0       	breq	.+30     	; 0x8e6 <vfprintf+0x8a>
 8c8:	83 32       	cpi	r24, 0x23	; 35
 8ca:	a1 f4       	brne	.+40     	; 0x8f4 <vfprintf+0x98>
 8cc:	23 2d       	mov	r18, r3
 8ce:	20 61       	ori	r18, 0x10	; 16
 8d0:	1d c0       	rjmp	.+58     	; 0x90c <__stack+0xd>
 8d2:	8d 32       	cpi	r24, 0x2D	; 45
 8d4:	61 f0       	breq	.+24     	; 0x8ee <vfprintf+0x92>
 8d6:	80 33       	cpi	r24, 0x30	; 48
 8d8:	69 f4       	brne	.+26     	; 0x8f4 <vfprintf+0x98>
 8da:	23 2d       	mov	r18, r3
 8dc:	21 60       	ori	r18, 0x01	; 1
 8de:	16 c0       	rjmp	.+44     	; 0x90c <__stack+0xd>
 8e0:	83 2d       	mov	r24, r3
 8e2:	82 60       	ori	r24, 0x02	; 2
 8e4:	38 2e       	mov	r3, r24
 8e6:	e3 2d       	mov	r30, r3
 8e8:	e4 60       	ori	r30, 0x04	; 4
 8ea:	3e 2e       	mov	r3, r30
 8ec:	2a c0       	rjmp	.+84     	; 0x942 <__stack+0x43>
 8ee:	f3 2d       	mov	r31, r3
 8f0:	f8 60       	ori	r31, 0x08	; 8
 8f2:	1d c0       	rjmp	.+58     	; 0x92e <__stack+0x2f>
 8f4:	37 fc       	sbrc	r3, 7
 8f6:	2d c0       	rjmp	.+90     	; 0x952 <__stack+0x53>
 8f8:	20 ed       	ldi	r18, 0xD0	; 208
 8fa:	28 0f       	add	r18, r24
 8fc:	2a 30       	cpi	r18, 0x0A	; 10
 8fe:	40 f0       	brcs	.+16     	; 0x910 <__stack+0x11>
 900:	8e 32       	cpi	r24, 0x2E	; 46
 902:	b9 f4       	brne	.+46     	; 0x932 <__stack+0x33>
 904:	36 fc       	sbrc	r3, 6
 906:	81 c1       	rjmp	.+770    	; 0xc0a <__stack+0x30b>
 908:	23 2d       	mov	r18, r3
 90a:	20 64       	ori	r18, 0x40	; 64
 90c:	32 2e       	mov	r3, r18
 90e:	19 c0       	rjmp	.+50     	; 0x942 <__stack+0x43>
 910:	36 fe       	sbrs	r3, 6
 912:	06 c0       	rjmp	.+12     	; 0x920 <__stack+0x21>
 914:	8a e0       	ldi	r24, 0x0A	; 10
 916:	98 9e       	mul	r9, r24
 918:	20 0d       	add	r18, r0
 91a:	11 24       	eor	r1, r1
 91c:	92 2e       	mov	r9, r18
 91e:	11 c0       	rjmp	.+34     	; 0x942 <__stack+0x43>
 920:	ea e0       	ldi	r30, 0x0A	; 10
 922:	2e 9e       	mul	r2, r30
 924:	20 0d       	add	r18, r0
 926:	11 24       	eor	r1, r1
 928:	22 2e       	mov	r2, r18
 92a:	f3 2d       	mov	r31, r3
 92c:	f0 62       	ori	r31, 0x20	; 32
 92e:	3f 2e       	mov	r3, r31
 930:	08 c0       	rjmp	.+16     	; 0x942 <__stack+0x43>
 932:	8c 36       	cpi	r24, 0x6C	; 108
 934:	21 f4       	brne	.+8      	; 0x93e <__stack+0x3f>
 936:	83 2d       	mov	r24, r3
 938:	80 68       	ori	r24, 0x80	; 128
 93a:	38 2e       	mov	r3, r24
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0x43>
 93e:	88 36       	cpi	r24, 0x68	; 104
 940:	41 f4       	brne	.+16     	; 0x952 <__stack+0x53>
 942:	f7 01       	movw	r30, r14
 944:	93 fd       	sbrc	r25, 3
 946:	85 91       	lpm	r24, Z+
 948:	93 ff       	sbrs	r25, 3
 94a:	81 91       	ld	r24, Z+
 94c:	7f 01       	movw	r14, r30
 94e:	81 11       	cpse	r24, r1
 950:	b3 cf       	rjmp	.-154    	; 0x8b8 <vfprintf+0x5c>
 952:	98 2f       	mov	r25, r24
 954:	9f 7d       	andi	r25, 0xDF	; 223
 956:	95 54       	subi	r25, 0x45	; 69
 958:	93 30       	cpi	r25, 0x03	; 3
 95a:	28 f4       	brcc	.+10     	; 0x966 <__stack+0x67>
 95c:	0c 5f       	subi	r16, 0xFC	; 252
 95e:	1f 4f       	sbci	r17, 0xFF	; 255
 960:	9f e3       	ldi	r25, 0x3F	; 63
 962:	99 83       	std	Y+1, r25	; 0x01
 964:	0d c0       	rjmp	.+26     	; 0x980 <__stack+0x81>
 966:	83 36       	cpi	r24, 0x63	; 99
 968:	31 f0       	breq	.+12     	; 0x976 <__stack+0x77>
 96a:	83 37       	cpi	r24, 0x73	; 115
 96c:	71 f0       	breq	.+28     	; 0x98a <__stack+0x8b>
 96e:	83 35       	cpi	r24, 0x53	; 83
 970:	09 f0       	breq	.+2      	; 0x974 <__stack+0x75>
 972:	59 c0       	rjmp	.+178    	; 0xa26 <__stack+0x127>
 974:	21 c0       	rjmp	.+66     	; 0x9b8 <__stack+0xb9>
 976:	f8 01       	movw	r30, r16
 978:	80 81       	ld	r24, Z
 97a:	89 83       	std	Y+1, r24	; 0x01
 97c:	0e 5f       	subi	r16, 0xFE	; 254
 97e:	1f 4f       	sbci	r17, 0xFF	; 255
 980:	88 24       	eor	r8, r8
 982:	83 94       	inc	r8
 984:	91 2c       	mov	r9, r1
 986:	53 01       	movw	r10, r6
 988:	13 c0       	rjmp	.+38     	; 0x9b0 <__stack+0xb1>
 98a:	28 01       	movw	r4, r16
 98c:	f2 e0       	ldi	r31, 0x02	; 2
 98e:	4f 0e       	add	r4, r31
 990:	51 1c       	adc	r5, r1
 992:	f8 01       	movw	r30, r16
 994:	a0 80       	ld	r10, Z
 996:	b1 80       	ldd	r11, Z+1	; 0x01
 998:	36 fe       	sbrs	r3, 6
 99a:	03 c0       	rjmp	.+6      	; 0x9a2 <__stack+0xa3>
 99c:	69 2d       	mov	r22, r9
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
 9a2:	6f ef       	ldi	r22, 0xFF	; 255
 9a4:	7f ef       	ldi	r23, 0xFF	; 255
 9a6:	c5 01       	movw	r24, r10
 9a8:	0e 94 1a 06 	call	0xc34	; 0xc34 <strnlen>
 9ac:	4c 01       	movw	r8, r24
 9ae:	82 01       	movw	r16, r4
 9b0:	f3 2d       	mov	r31, r3
 9b2:	ff 77       	andi	r31, 0x7F	; 127
 9b4:	3f 2e       	mov	r3, r31
 9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <__stack+0xe5>
 9b8:	28 01       	movw	r4, r16
 9ba:	22 e0       	ldi	r18, 0x02	; 2
 9bc:	42 0e       	add	r4, r18
 9be:	51 1c       	adc	r5, r1
 9c0:	f8 01       	movw	r30, r16
 9c2:	a0 80       	ld	r10, Z
 9c4:	b1 80       	ldd	r11, Z+1	; 0x01
 9c6:	36 fe       	sbrs	r3, 6
 9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__stack+0xd1>
 9ca:	69 2d       	mov	r22, r9
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__stack+0xd5>
 9d0:	6f ef       	ldi	r22, 0xFF	; 255
 9d2:	7f ef       	ldi	r23, 0xFF	; 255
 9d4:	c5 01       	movw	r24, r10
 9d6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <strnlen_P>
 9da:	4c 01       	movw	r8, r24
 9dc:	f3 2d       	mov	r31, r3
 9de:	f0 68       	ori	r31, 0x80	; 128
 9e0:	3f 2e       	mov	r3, r31
 9e2:	82 01       	movw	r16, r4
 9e4:	33 fc       	sbrc	r3, 3
 9e6:	1b c0       	rjmp	.+54     	; 0xa1e <__stack+0x11f>
 9e8:	82 2d       	mov	r24, r2
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	88 16       	cp	r8, r24
 9ee:	99 06       	cpc	r9, r25
 9f0:	b0 f4       	brcc	.+44     	; 0xa1e <__stack+0x11f>
 9f2:	b6 01       	movw	r22, r12
 9f4:	80 e2       	ldi	r24, 0x20	; 32
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 9fc:	2a 94       	dec	r2
 9fe:	f4 cf       	rjmp	.-24     	; 0x9e8 <__stack+0xe9>
 a00:	f5 01       	movw	r30, r10
 a02:	37 fc       	sbrc	r3, 7
 a04:	85 91       	lpm	r24, Z+
 a06:	37 fe       	sbrs	r3, 7
 a08:	81 91       	ld	r24, Z+
 a0a:	5f 01       	movw	r10, r30
 a0c:	b6 01       	movw	r22, r12
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 a14:	21 10       	cpse	r2, r1
 a16:	2a 94       	dec	r2
 a18:	21 e0       	ldi	r18, 0x01	; 1
 a1a:	82 1a       	sub	r8, r18
 a1c:	91 08       	sbc	r9, r1
 a1e:	81 14       	cp	r8, r1
 a20:	91 04       	cpc	r9, r1
 a22:	71 f7       	brne	.-36     	; 0xa00 <__stack+0x101>
 a24:	e8 c0       	rjmp	.+464    	; 0xbf6 <__stack+0x2f7>
 a26:	84 36       	cpi	r24, 0x64	; 100
 a28:	11 f0       	breq	.+4      	; 0xa2e <__stack+0x12f>
 a2a:	89 36       	cpi	r24, 0x69	; 105
 a2c:	41 f5       	brne	.+80     	; 0xa7e <__stack+0x17f>
 a2e:	f8 01       	movw	r30, r16
 a30:	37 fe       	sbrs	r3, 7
 a32:	07 c0       	rjmp	.+14     	; 0xa42 <__stack+0x143>
 a34:	60 81       	ld	r22, Z
 a36:	71 81       	ldd	r23, Z+1	; 0x01
 a38:	82 81       	ldd	r24, Z+2	; 0x02
 a3a:	93 81       	ldd	r25, Z+3	; 0x03
 a3c:	0c 5f       	subi	r16, 0xFC	; 252
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	08 c0       	rjmp	.+16     	; 0xa52 <__stack+0x153>
 a42:	60 81       	ld	r22, Z
 a44:	71 81       	ldd	r23, Z+1	; 0x01
 a46:	07 2e       	mov	r0, r23
 a48:	00 0c       	add	r0, r0
 a4a:	88 0b       	sbc	r24, r24
 a4c:	99 0b       	sbc	r25, r25
 a4e:	0e 5f       	subi	r16, 0xFE	; 254
 a50:	1f 4f       	sbci	r17, 0xFF	; 255
 a52:	f3 2d       	mov	r31, r3
 a54:	ff 76       	andi	r31, 0x6F	; 111
 a56:	3f 2e       	mov	r3, r31
 a58:	97 ff       	sbrs	r25, 7
 a5a:	09 c0       	rjmp	.+18     	; 0xa6e <__stack+0x16f>
 a5c:	90 95       	com	r25
 a5e:	80 95       	com	r24
 a60:	70 95       	com	r23
 a62:	61 95       	neg	r22
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	f0 68       	ori	r31, 0x80	; 128
 a6c:	3f 2e       	mov	r3, r31
 a6e:	2a e0       	ldi	r18, 0x0A	; 10
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	a3 01       	movw	r20, r6
 a74:	0e 94 71 06 	call	0xce2	; 0xce2 <__ultoa_invert>
 a78:	88 2e       	mov	r8, r24
 a7a:	86 18       	sub	r8, r6
 a7c:	45 c0       	rjmp	.+138    	; 0xb08 <__stack+0x209>
 a7e:	85 37       	cpi	r24, 0x75	; 117
 a80:	31 f4       	brne	.+12     	; 0xa8e <__stack+0x18f>
 a82:	23 2d       	mov	r18, r3
 a84:	2f 7e       	andi	r18, 0xEF	; 239
 a86:	b2 2e       	mov	r11, r18
 a88:	2a e0       	ldi	r18, 0x0A	; 10
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	25 c0       	rjmp	.+74     	; 0xad8 <__stack+0x1d9>
 a8e:	93 2d       	mov	r25, r3
 a90:	99 7f       	andi	r25, 0xF9	; 249
 a92:	b9 2e       	mov	r11, r25
 a94:	8f 36       	cpi	r24, 0x6F	; 111
 a96:	c1 f0       	breq	.+48     	; 0xac8 <__stack+0x1c9>
 a98:	18 f4       	brcc	.+6      	; 0xaa0 <__stack+0x1a1>
 a9a:	88 35       	cpi	r24, 0x58	; 88
 a9c:	79 f0       	breq	.+30     	; 0xabc <__stack+0x1bd>
 a9e:	b5 c0       	rjmp	.+362    	; 0xc0a <__stack+0x30b>
 aa0:	80 37       	cpi	r24, 0x70	; 112
 aa2:	19 f0       	breq	.+6      	; 0xaaa <__stack+0x1ab>
 aa4:	88 37       	cpi	r24, 0x78	; 120
 aa6:	21 f0       	breq	.+8      	; 0xab0 <__stack+0x1b1>
 aa8:	b0 c0       	rjmp	.+352    	; 0xc0a <__stack+0x30b>
 aaa:	e9 2f       	mov	r30, r25
 aac:	e0 61       	ori	r30, 0x10	; 16
 aae:	be 2e       	mov	r11, r30
 ab0:	b4 fe       	sbrs	r11, 4
 ab2:	0d c0       	rjmp	.+26     	; 0xace <__stack+0x1cf>
 ab4:	fb 2d       	mov	r31, r11
 ab6:	f4 60       	ori	r31, 0x04	; 4
 ab8:	bf 2e       	mov	r11, r31
 aba:	09 c0       	rjmp	.+18     	; 0xace <__stack+0x1cf>
 abc:	34 fe       	sbrs	r3, 4
 abe:	0a c0       	rjmp	.+20     	; 0xad4 <__stack+0x1d5>
 ac0:	29 2f       	mov	r18, r25
 ac2:	26 60       	ori	r18, 0x06	; 6
 ac4:	b2 2e       	mov	r11, r18
 ac6:	06 c0       	rjmp	.+12     	; 0xad4 <__stack+0x1d5>
 ac8:	28 e0       	ldi	r18, 0x08	; 8
 aca:	30 e0       	ldi	r19, 0x00	; 0
 acc:	05 c0       	rjmp	.+10     	; 0xad8 <__stack+0x1d9>
 ace:	20 e1       	ldi	r18, 0x10	; 16
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <__stack+0x1d9>
 ad4:	20 e1       	ldi	r18, 0x10	; 16
 ad6:	32 e0       	ldi	r19, 0x02	; 2
 ad8:	f8 01       	movw	r30, r16
 ada:	b7 fe       	sbrs	r11, 7
 adc:	07 c0       	rjmp	.+14     	; 0xaec <__stack+0x1ed>
 ade:	60 81       	ld	r22, Z
 ae0:	71 81       	ldd	r23, Z+1	; 0x01
 ae2:	82 81       	ldd	r24, Z+2	; 0x02
 ae4:	93 81       	ldd	r25, Z+3	; 0x03
 ae6:	0c 5f       	subi	r16, 0xFC	; 252
 ae8:	1f 4f       	sbci	r17, 0xFF	; 255
 aea:	06 c0       	rjmp	.+12     	; 0xaf8 <__stack+0x1f9>
 aec:	60 81       	ld	r22, Z
 aee:	71 81       	ldd	r23, Z+1	; 0x01
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 5f       	subi	r16, 0xFE	; 254
 af6:	1f 4f       	sbci	r17, 0xFF	; 255
 af8:	a3 01       	movw	r20, r6
 afa:	0e 94 71 06 	call	0xce2	; 0xce2 <__ultoa_invert>
 afe:	88 2e       	mov	r8, r24
 b00:	86 18       	sub	r8, r6
 b02:	fb 2d       	mov	r31, r11
 b04:	ff 77       	andi	r31, 0x7F	; 127
 b06:	3f 2e       	mov	r3, r31
 b08:	36 fe       	sbrs	r3, 6
 b0a:	0d c0       	rjmp	.+26     	; 0xb26 <__stack+0x227>
 b0c:	23 2d       	mov	r18, r3
 b0e:	2e 7f       	andi	r18, 0xFE	; 254
 b10:	a2 2e       	mov	r10, r18
 b12:	89 14       	cp	r8, r9
 b14:	58 f4       	brcc	.+22     	; 0xb2c <__stack+0x22d>
 b16:	34 fe       	sbrs	r3, 4
 b18:	0b c0       	rjmp	.+22     	; 0xb30 <__stack+0x231>
 b1a:	32 fc       	sbrc	r3, 2
 b1c:	09 c0       	rjmp	.+18     	; 0xb30 <__stack+0x231>
 b1e:	83 2d       	mov	r24, r3
 b20:	8e 7e       	andi	r24, 0xEE	; 238
 b22:	a8 2e       	mov	r10, r24
 b24:	05 c0       	rjmp	.+10     	; 0xb30 <__stack+0x231>
 b26:	b8 2c       	mov	r11, r8
 b28:	a3 2c       	mov	r10, r3
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__stack+0x233>
 b2c:	b8 2c       	mov	r11, r8
 b2e:	01 c0       	rjmp	.+2      	; 0xb32 <__stack+0x233>
 b30:	b9 2c       	mov	r11, r9
 b32:	a4 fe       	sbrs	r10, 4
 b34:	0f c0       	rjmp	.+30     	; 0xb54 <__stack+0x255>
 b36:	fe 01       	movw	r30, r28
 b38:	e8 0d       	add	r30, r8
 b3a:	f1 1d       	adc	r31, r1
 b3c:	80 81       	ld	r24, Z
 b3e:	80 33       	cpi	r24, 0x30	; 48
 b40:	21 f4       	brne	.+8      	; 0xb4a <__stack+0x24b>
 b42:	9a 2d       	mov	r25, r10
 b44:	99 7e       	andi	r25, 0xE9	; 233
 b46:	a9 2e       	mov	r10, r25
 b48:	09 c0       	rjmp	.+18     	; 0xb5c <__stack+0x25d>
 b4a:	a2 fe       	sbrs	r10, 2
 b4c:	06 c0       	rjmp	.+12     	; 0xb5a <__stack+0x25b>
 b4e:	b3 94       	inc	r11
 b50:	b3 94       	inc	r11
 b52:	04 c0       	rjmp	.+8      	; 0xb5c <__stack+0x25d>
 b54:	8a 2d       	mov	r24, r10
 b56:	86 78       	andi	r24, 0x86	; 134
 b58:	09 f0       	breq	.+2      	; 0xb5c <__stack+0x25d>
 b5a:	b3 94       	inc	r11
 b5c:	a3 fc       	sbrc	r10, 3
 b5e:	11 c0       	rjmp	.+34     	; 0xb82 <__stack+0x283>
 b60:	a0 fe       	sbrs	r10, 0
 b62:	06 c0       	rjmp	.+12     	; 0xb70 <__stack+0x271>
 b64:	b2 14       	cp	r11, r2
 b66:	88 f4       	brcc	.+34     	; 0xb8a <__stack+0x28b>
 b68:	28 0c       	add	r2, r8
 b6a:	92 2c       	mov	r9, r2
 b6c:	9b 18       	sub	r9, r11
 b6e:	0e c0       	rjmp	.+28     	; 0xb8c <__stack+0x28d>
 b70:	b2 14       	cp	r11, r2
 b72:	60 f4       	brcc	.+24     	; 0xb8c <__stack+0x28d>
 b74:	b6 01       	movw	r22, r12
 b76:	80 e2       	ldi	r24, 0x20	; 32
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 b7e:	b3 94       	inc	r11
 b80:	f7 cf       	rjmp	.-18     	; 0xb70 <__stack+0x271>
 b82:	b2 14       	cp	r11, r2
 b84:	18 f4       	brcc	.+6      	; 0xb8c <__stack+0x28d>
 b86:	2b 18       	sub	r2, r11
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <__stack+0x28f>
 b8a:	98 2c       	mov	r9, r8
 b8c:	21 2c       	mov	r2, r1
 b8e:	a4 fe       	sbrs	r10, 4
 b90:	10 c0       	rjmp	.+32     	; 0xbb2 <__stack+0x2b3>
 b92:	b6 01       	movw	r22, r12
 b94:	80 e3       	ldi	r24, 0x30	; 48
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 b9c:	a2 fe       	sbrs	r10, 2
 b9e:	17 c0       	rjmp	.+46     	; 0xbce <__stack+0x2cf>
 ba0:	a1 fc       	sbrc	r10, 1
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__stack+0x2ab>
 ba4:	88 e7       	ldi	r24, 0x78	; 120
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <__stack+0x2af>
 baa:	88 e5       	ldi	r24, 0x58	; 88
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	b6 01       	movw	r22, r12
 bb0:	0c c0       	rjmp	.+24     	; 0xbca <__stack+0x2cb>
 bb2:	8a 2d       	mov	r24, r10
 bb4:	86 78       	andi	r24, 0x86	; 134
 bb6:	59 f0       	breq	.+22     	; 0xbce <__stack+0x2cf>
 bb8:	a1 fe       	sbrs	r10, 1
 bba:	02 c0       	rjmp	.+4      	; 0xbc0 <__stack+0x2c1>
 bbc:	8b e2       	ldi	r24, 0x2B	; 43
 bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <__stack+0x2c3>
 bc0:	80 e2       	ldi	r24, 0x20	; 32
 bc2:	a7 fc       	sbrc	r10, 7
 bc4:	8d e2       	ldi	r24, 0x2D	; 45
 bc6:	b6 01       	movw	r22, r12
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 bce:	89 14       	cp	r8, r9
 bd0:	38 f4       	brcc	.+14     	; 0xbe0 <__stack+0x2e1>
 bd2:	b6 01       	movw	r22, r12
 bd4:	80 e3       	ldi	r24, 0x30	; 48
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 bdc:	9a 94       	dec	r9
 bde:	f7 cf       	rjmp	.-18     	; 0xbce <__stack+0x2cf>
 be0:	8a 94       	dec	r8
 be2:	f3 01       	movw	r30, r6
 be4:	e8 0d       	add	r30, r8
 be6:	f1 1d       	adc	r31, r1
 be8:	80 81       	ld	r24, Z
 bea:	b6 01       	movw	r22, r12
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 bf2:	81 10       	cpse	r8, r1
 bf4:	f5 cf       	rjmp	.-22     	; 0xbe0 <__stack+0x2e1>
 bf6:	22 20       	and	r2, r2
 bf8:	09 f4       	brne	.+2      	; 0xbfc <__stack+0x2fd>
 bfa:	42 ce       	rjmp	.-892    	; 0x880 <vfprintf+0x24>
 bfc:	b6 01       	movw	r22, r12
 bfe:	80 e2       	ldi	r24, 0x20	; 32
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 c06:	2a 94       	dec	r2
 c08:	f6 cf       	rjmp	.-20     	; 0xbf6 <__stack+0x2f7>
 c0a:	f6 01       	movw	r30, r12
 c0c:	86 81       	ldd	r24, Z+6	; 0x06
 c0e:	97 81       	ldd	r25, Z+7	; 0x07
 c10:	02 c0       	rjmp	.+4      	; 0xc16 <__stack+0x317>
 c12:	8f ef       	ldi	r24, 0xFF	; 255
 c14:	9f ef       	ldi	r25, 0xFF	; 255
 c16:	2b 96       	adiw	r28, 0x0b	; 11
 c18:	e2 e1       	ldi	r30, 0x12	; 18
 c1a:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__epilogue_restores__>

00000c1e <strnlen_P>:
 c1e:	fc 01       	movw	r30, r24
 c20:	05 90       	lpm	r0, Z+
 c22:	61 50       	subi	r22, 0x01	; 1
 c24:	70 40       	sbci	r23, 0x00	; 0
 c26:	01 10       	cpse	r0, r1
 c28:	d8 f7       	brcc	.-10     	; 0xc20 <strnlen_P+0x2>
 c2a:	80 95       	com	r24
 c2c:	90 95       	com	r25
 c2e:	8e 0f       	add	r24, r30
 c30:	9f 1f       	adc	r25, r31
 c32:	08 95       	ret

00000c34 <strnlen>:
 c34:	fc 01       	movw	r30, r24
 c36:	61 50       	subi	r22, 0x01	; 1
 c38:	70 40       	sbci	r23, 0x00	; 0
 c3a:	01 90       	ld	r0, Z+
 c3c:	01 10       	cpse	r0, r1
 c3e:	d8 f7       	brcc	.-10     	; 0xc36 <strnlen+0x2>
 c40:	80 95       	com	r24
 c42:	90 95       	com	r25
 c44:	8e 0f       	add	r24, r30
 c46:	9f 1f       	adc	r25, r31
 c48:	08 95       	ret

00000c4a <strrev>:
 c4a:	dc 01       	movw	r26, r24
 c4c:	fc 01       	movw	r30, r24
 c4e:	67 2f       	mov	r22, r23
 c50:	71 91       	ld	r23, Z+
 c52:	77 23       	and	r23, r23
 c54:	e1 f7       	brne	.-8      	; 0xc4e <strrev+0x4>
 c56:	32 97       	sbiw	r30, 0x02	; 2
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <strrev+0x18>
 c5a:	7c 91       	ld	r23, X
 c5c:	6d 93       	st	X+, r22
 c5e:	70 83       	st	Z, r23
 c60:	62 91       	ld	r22, -Z
 c62:	ae 17       	cp	r26, r30
 c64:	bf 07       	cpc	r27, r31
 c66:	c8 f3       	brcs	.-14     	; 0xc5a <strrev+0x10>
 c68:	08 95       	ret

00000c6a <fputc>:
 c6a:	0f 93       	push	r16
 c6c:	1f 93       	push	r17
 c6e:	cf 93       	push	r28
 c70:	df 93       	push	r29
 c72:	fb 01       	movw	r30, r22
 c74:	23 81       	ldd	r18, Z+3	; 0x03
 c76:	21 fd       	sbrc	r18, 1
 c78:	03 c0       	rjmp	.+6      	; 0xc80 <fputc+0x16>
 c7a:	8f ef       	ldi	r24, 0xFF	; 255
 c7c:	9f ef       	ldi	r25, 0xFF	; 255
 c7e:	2c c0       	rjmp	.+88     	; 0xcd8 <fputc+0x6e>
 c80:	22 ff       	sbrs	r18, 2
 c82:	16 c0       	rjmp	.+44     	; 0xcb0 <fputc+0x46>
 c84:	46 81       	ldd	r20, Z+6	; 0x06
 c86:	57 81       	ldd	r21, Z+7	; 0x07
 c88:	24 81       	ldd	r18, Z+4	; 0x04
 c8a:	35 81       	ldd	r19, Z+5	; 0x05
 c8c:	42 17       	cp	r20, r18
 c8e:	53 07       	cpc	r21, r19
 c90:	44 f4       	brge	.+16     	; 0xca2 <fputc+0x38>
 c92:	a0 81       	ld	r26, Z
 c94:	b1 81       	ldd	r27, Z+1	; 0x01
 c96:	9d 01       	movw	r18, r26
 c98:	2f 5f       	subi	r18, 0xFF	; 255
 c9a:	3f 4f       	sbci	r19, 0xFF	; 255
 c9c:	31 83       	std	Z+1, r19	; 0x01
 c9e:	20 83       	st	Z, r18
 ca0:	8c 93       	st	X, r24
 ca2:	26 81       	ldd	r18, Z+6	; 0x06
 ca4:	37 81       	ldd	r19, Z+7	; 0x07
 ca6:	2f 5f       	subi	r18, 0xFF	; 255
 ca8:	3f 4f       	sbci	r19, 0xFF	; 255
 caa:	37 83       	std	Z+7, r19	; 0x07
 cac:	26 83       	std	Z+6, r18	; 0x06
 cae:	14 c0       	rjmp	.+40     	; 0xcd8 <fputc+0x6e>
 cb0:	8b 01       	movw	r16, r22
 cb2:	ec 01       	movw	r28, r24
 cb4:	fb 01       	movw	r30, r22
 cb6:	00 84       	ldd	r0, Z+8	; 0x08
 cb8:	f1 85       	ldd	r31, Z+9	; 0x09
 cba:	e0 2d       	mov	r30, r0
 cbc:	09 95       	icall
 cbe:	89 2b       	or	r24, r25
 cc0:	e1 f6       	brne	.-72     	; 0xc7a <fputc+0x10>
 cc2:	d8 01       	movw	r26, r16
 cc4:	16 96       	adiw	r26, 0x06	; 6
 cc6:	8d 91       	ld	r24, X+
 cc8:	9c 91       	ld	r25, X
 cca:	17 97       	sbiw	r26, 0x07	; 7
 ccc:	01 96       	adiw	r24, 0x01	; 1
 cce:	17 96       	adiw	r26, 0x07	; 7
 cd0:	9c 93       	st	X, r25
 cd2:	8e 93       	st	-X, r24
 cd4:	16 97       	sbiw	r26, 0x06	; 6
 cd6:	ce 01       	movw	r24, r28
 cd8:	df 91       	pop	r29
 cda:	cf 91       	pop	r28
 cdc:	1f 91       	pop	r17
 cde:	0f 91       	pop	r16
 ce0:	08 95       	ret

00000ce2 <__ultoa_invert>:
 ce2:	fa 01       	movw	r30, r20
 ce4:	aa 27       	eor	r26, r26
 ce6:	28 30       	cpi	r18, 0x08	; 8
 ce8:	51 f1       	breq	.+84     	; 0xd3e <__ultoa_invert+0x5c>
 cea:	20 31       	cpi	r18, 0x10	; 16
 cec:	81 f1       	breq	.+96     	; 0xd4e <__ultoa_invert+0x6c>
 cee:	e8 94       	clt
 cf0:	6f 93       	push	r22
 cf2:	6e 7f       	andi	r22, 0xFE	; 254
 cf4:	6e 5f       	subi	r22, 0xFE	; 254
 cf6:	7f 4f       	sbci	r23, 0xFF	; 255
 cf8:	8f 4f       	sbci	r24, 0xFF	; 255
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	af 4f       	sbci	r26, 0xFF	; 255
 cfe:	b1 e0       	ldi	r27, 0x01	; 1
 d00:	3e d0       	rcall	.+124    	; 0xd7e <__ultoa_invert+0x9c>
 d02:	b4 e0       	ldi	r27, 0x04	; 4
 d04:	3c d0       	rcall	.+120    	; 0xd7e <__ultoa_invert+0x9c>
 d06:	67 0f       	add	r22, r23
 d08:	78 1f       	adc	r23, r24
 d0a:	89 1f       	adc	r24, r25
 d0c:	9a 1f       	adc	r25, r26
 d0e:	a1 1d       	adc	r26, r1
 d10:	68 0f       	add	r22, r24
 d12:	79 1f       	adc	r23, r25
 d14:	8a 1f       	adc	r24, r26
 d16:	91 1d       	adc	r25, r1
 d18:	a1 1d       	adc	r26, r1
 d1a:	6a 0f       	add	r22, r26
 d1c:	71 1d       	adc	r23, r1
 d1e:	81 1d       	adc	r24, r1
 d20:	91 1d       	adc	r25, r1
 d22:	a1 1d       	adc	r26, r1
 d24:	20 d0       	rcall	.+64     	; 0xd66 <__ultoa_invert+0x84>
 d26:	09 f4       	brne	.+2      	; 0xd2a <__ultoa_invert+0x48>
 d28:	68 94       	set
 d2a:	3f 91       	pop	r19
 d2c:	2a e0       	ldi	r18, 0x0A	; 10
 d2e:	26 9f       	mul	r18, r22
 d30:	11 24       	eor	r1, r1
 d32:	30 19       	sub	r19, r0
 d34:	30 5d       	subi	r19, 0xD0	; 208
 d36:	31 93       	st	Z+, r19
 d38:	de f6       	brtc	.-74     	; 0xcf0 <__ultoa_invert+0xe>
 d3a:	cf 01       	movw	r24, r30
 d3c:	08 95       	ret
 d3e:	46 2f       	mov	r20, r22
 d40:	47 70       	andi	r20, 0x07	; 7
 d42:	40 5d       	subi	r20, 0xD0	; 208
 d44:	41 93       	st	Z+, r20
 d46:	b3 e0       	ldi	r27, 0x03	; 3
 d48:	0f d0       	rcall	.+30     	; 0xd68 <__ultoa_invert+0x86>
 d4a:	c9 f7       	brne	.-14     	; 0xd3e <__ultoa_invert+0x5c>
 d4c:	f6 cf       	rjmp	.-20     	; 0xd3a <__ultoa_invert+0x58>
 d4e:	46 2f       	mov	r20, r22
 d50:	4f 70       	andi	r20, 0x0F	; 15
 d52:	40 5d       	subi	r20, 0xD0	; 208
 d54:	4a 33       	cpi	r20, 0x3A	; 58
 d56:	18 f0       	brcs	.+6      	; 0xd5e <__ultoa_invert+0x7c>
 d58:	49 5d       	subi	r20, 0xD9	; 217
 d5a:	31 fd       	sbrc	r19, 1
 d5c:	40 52       	subi	r20, 0x20	; 32
 d5e:	41 93       	st	Z+, r20
 d60:	02 d0       	rcall	.+4      	; 0xd66 <__ultoa_invert+0x84>
 d62:	a9 f7       	brne	.-22     	; 0xd4e <__ultoa_invert+0x6c>
 d64:	ea cf       	rjmp	.-44     	; 0xd3a <__ultoa_invert+0x58>
 d66:	b4 e0       	ldi	r27, 0x04	; 4
 d68:	a6 95       	lsr	r26
 d6a:	97 95       	ror	r25
 d6c:	87 95       	ror	r24
 d6e:	77 95       	ror	r23
 d70:	67 95       	ror	r22
 d72:	ba 95       	dec	r27
 d74:	c9 f7       	brne	.-14     	; 0xd68 <__ultoa_invert+0x86>
 d76:	00 97       	sbiw	r24, 0x00	; 0
 d78:	61 05       	cpc	r22, r1
 d7a:	71 05       	cpc	r23, r1
 d7c:	08 95       	ret
 d7e:	9b 01       	movw	r18, r22
 d80:	ac 01       	movw	r20, r24
 d82:	0a 2e       	mov	r0, r26
 d84:	06 94       	lsr	r0
 d86:	57 95       	ror	r21
 d88:	47 95       	ror	r20
 d8a:	37 95       	ror	r19
 d8c:	27 95       	ror	r18
 d8e:	ba 95       	dec	r27
 d90:	c9 f7       	brne	.-14     	; 0xd84 <__ultoa_invert+0xa2>
 d92:	62 0f       	add	r22, r18
 d94:	73 1f       	adc	r23, r19
 d96:	84 1f       	adc	r24, r20
 d98:	95 1f       	adc	r25, r21
 d9a:	a0 1d       	adc	r26, r0
 d9c:	08 95       	ret

00000d9e <__prologue_saves__>:
 d9e:	2f 92       	push	r2
 da0:	3f 92       	push	r3
 da2:	4f 92       	push	r4
 da4:	5f 92       	push	r5
 da6:	6f 92       	push	r6
 da8:	7f 92       	push	r7
 daa:	8f 92       	push	r8
 dac:	9f 92       	push	r9
 dae:	af 92       	push	r10
 db0:	bf 92       	push	r11
 db2:	cf 92       	push	r12
 db4:	df 92       	push	r13
 db6:	ef 92       	push	r14
 db8:	ff 92       	push	r15
 dba:	0f 93       	push	r16
 dbc:	1f 93       	push	r17
 dbe:	cf 93       	push	r28
 dc0:	df 93       	push	r29
 dc2:	cd b7       	in	r28, 0x3d	; 61
 dc4:	de b7       	in	r29, 0x3e	; 62
 dc6:	ca 1b       	sub	r28, r26
 dc8:	db 0b       	sbc	r29, r27
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	f8 94       	cli
 dce:	de bf       	out	0x3e, r29	; 62
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	cd bf       	out	0x3d, r28	; 61
 dd4:	09 94       	ijmp

00000dd6 <__epilogue_restores__>:
 dd6:	2a 88       	ldd	r2, Y+18	; 0x12
 dd8:	39 88       	ldd	r3, Y+17	; 0x11
 dda:	48 88       	ldd	r4, Y+16	; 0x10
 ddc:	5f 84       	ldd	r5, Y+15	; 0x0f
 dde:	6e 84       	ldd	r6, Y+14	; 0x0e
 de0:	7d 84       	ldd	r7, Y+13	; 0x0d
 de2:	8c 84       	ldd	r8, Y+12	; 0x0c
 de4:	9b 84       	ldd	r9, Y+11	; 0x0b
 de6:	aa 84       	ldd	r10, Y+10	; 0x0a
 de8:	b9 84       	ldd	r11, Y+9	; 0x09
 dea:	c8 84       	ldd	r12, Y+8	; 0x08
 dec:	df 80       	ldd	r13, Y+7	; 0x07
 dee:	ee 80       	ldd	r14, Y+6	; 0x06
 df0:	fd 80       	ldd	r15, Y+5	; 0x05
 df2:	0c 81       	ldd	r16, Y+4	; 0x04
 df4:	1b 81       	ldd	r17, Y+3	; 0x03
 df6:	aa 81       	ldd	r26, Y+2	; 0x02
 df8:	b9 81       	ldd	r27, Y+1	; 0x01
 dfa:	ce 0f       	add	r28, r30
 dfc:	d1 1d       	adc	r29, r1
 dfe:	0f b6       	in	r0, 0x3f	; 63
 e00:	f8 94       	cli
 e02:	de bf       	out	0x3e, r29	; 62
 e04:	0f be       	out	0x3f, r0	; 63
 e06:	cd bf       	out	0x3d, r28	; 61
 e08:	ed 01       	movw	r28, r26
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
